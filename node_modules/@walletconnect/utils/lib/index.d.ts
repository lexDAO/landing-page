/// <reference types="node" />
import { ITxData, IClientMeta, IParseURIResult, IJsonRpcSubscription, IJsonRpcRequest, IJsonRpcResponseSuccess, IJsonRpcResponseError, IJsonRpcErrorMessage, IInternalEvent, IWalletConnectSession } from '@walletconnect/types';
export declare function convertArrayBufferToBuffer(arrayBuffer: ArrayBuffer): Buffer;
export declare function convertArrayBufferToUtf8(arrayBuffer: ArrayBuffer): string;
export declare function convertArrayBufferToHex(arrayBuffer: ArrayBuffer, noPrefix?: boolean): string;
export declare function convertArrayBufferToNumber(arrayBuffer: ArrayBuffer): number;
export declare function concatArrayBuffers(...args: ArrayBuffer[]): ArrayBuffer;
export declare function convertBufferToArrayBuffer(buffer: Buffer): ArrayBuffer;
export declare function convertBufferToUtf8(buffer: Buffer): string;
export declare function convertBufferToHex(buffer: Buffer, noPrefix?: boolean): string;
export declare function convertBufferToNumber(buffer: Buffer): number;
export declare function concatBuffers(...args: Buffer[]): Buffer;
export declare function convertUtf8ToArrayBuffer(utf8: string): ArrayBuffer;
export declare function convertUtf8ToBuffer(utf8: string): Buffer;
export declare function convertUtf8ToHex(utf8: string, noPrefix?: boolean): string;
export declare function convertUtf8ToNumber(utf8: string): number;
export declare function convertNumberToBuffer(num: number): Buffer;
export declare function convertNumberToArrayBuffer(num: number): ArrayBuffer;
export declare function convertNumberToUtf8(num: number): string;
export declare function convertNumberToHex(num: number | string, noPrefix?: boolean): string;
export declare function convertHexToBuffer(hex: string): Buffer;
export declare function convertHexToArrayBuffer(hex: string): ArrayBuffer;
export declare function convertHexToUtf8(hex: string): string;
export declare function convertHexToNumber(hex: string): number;
export declare function sanitizeHex(hex: string): string;
export declare function addHexPrefix(hex: string): string;
export declare function removeHexPrefix(hex: string): string;
export declare function removeHexLeadingZeros(hex: string): string;
export declare function isHexString(value: any): boolean;
export declare function isEmptyString(value: string): boolean;
export declare function payloadId(): number;
export declare function uuid(): string;
export declare const toChecksumAddress: (address: string) => string;
export declare const isValidAddress: (address?: string | undefined) => boolean;
export declare function getMeta(): IClientMeta | null;
export declare function parseQueryString(queryString: string): any;
export declare function parseWalletConnectUri(str: string): IParseURIResult;
export declare function promisify(originalFn: (...args: any[]) => void, thisArg?: any): (...callArgs: any[]) => Promise<IJsonRpcResponseSuccess | IJsonRpcResponseError>;
export declare function isEmptyArray(array: any[]): boolean;
export declare function parsePersonalSign(params: string[]): string[];
export declare function parseTransactionData(txData: Partial<ITxData>): Partial<ITxData>;
export declare function formatRpcError(error: Partial<IJsonRpcErrorMessage>): {
    code: number;
    message: string;
};
export declare function isJsonRpcSubscription(object: any): object is IJsonRpcSubscription;
export declare function isJsonRpcRequest(object: any): object is IJsonRpcRequest;
export declare function isJsonRpcResponseSuccess(object: any): object is IJsonRpcResponseSuccess;
export declare function isJsonRpcResponseError(object: any): object is IJsonRpcResponseError;
export declare function isInternalEvent(object: any): object is IInternalEvent;
export declare function isWalletConnectSession(object: any): object is IWalletConnectSession;
export declare function isReservedEvent(event: string): boolean;
export declare const signingMethods: string[];
export declare const stateMethods: string[];
export declare function isSilentPayload(request: IJsonRpcRequest): boolean;
//# sourceMappingURL=index.d.ts.map