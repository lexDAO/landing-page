{"ast":null,"code":"var _jsxFileName = \"/Users/kerp/Documents/GitHub/landing-page/src/components/PersonalToken/index.jsx\";\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { useFactoryContract, useWeb3React } from \"../../hooks\";\nimport Web3Status from \"../Web3Status\";\nimport { utils } from \"ethers\";\nimport ReactMarkdown from 'react-markdown';\nimport Handlebars from 'handlebars';\nimport Axios from 'axios';\nimport AWS from 'aws-sdk';\nimport { Link } from \"../../theme\";\nimport Modal from \"../Modal\";\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\nconst s3 = new AWS.S3({\n  apiVersion: '2006-03-01',\n  accessKeyId: process.env.REACT_APP_FLEEK_API_KEY,\n  secretAccessKey: process.env.REACT_APP_FLEEK_API_SECRET,\n  endpoint: 'https://storageapi.fleek.co',\n  region: 'us-east-1',\n  s3ForcePathStyle: true\n});\nconst TOKEN_WEBHOOK = process.env.REACT_APP_TOKEN_WEBHOOK;\nconst tokenFormItems = [{\n  name: \"name\",\n  type: \"text\",\n  placeholder: \"Your Name\"\n}, {\n  name: \"symbol\",\n  type: \"text\",\n  placeholder: \"What are your Initials? (Token Symbol)\"\n}, {\n  name: \"stamp\",\n  type: \"text\",\n  placeholder: \"Terms of Service Link (Optional)\"\n}, {\n  name: \"email\",\n  type: \"email\",\n  placeholder: \"Email (Optional)\"\n}];\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-areas: \"header header\"\\n\"description form\";\n  grid-template-rows: 20% auto;\n  grid-template-columns: 45% 55%;\n`;\nconst Logo = styled.img`\n  height: 50px;\n  margin-top: 15px;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst Description = styled.div`\n  grid-area: description;\n  width: 80%;\n  margin: auto;\n  line-height: 1.7rem;\n  padding-left: 20%;\n\n  & > p {\n    font-size: 0.938rem;\n\n    & > a {\n      color: ${({\n  theme\n}) => theme.uniswapPink};\n      text-decoration: none;\n\n      :hover {\n        text-decoration: underline;\n      }\n    }\n  }\n`;\nconst TokenForm = styled.div`\n  grid-area: form;\n  width: 80%;\n  margin: auto;\n  margin-top:0;\n\n  & > form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    & > input {\n      width: 80%;\n      line-height: 1.5rem;\n      margin-bottom: 3.5rem;\n      border-radius: .25rem;\n      border: 1px solid #000000;\n      color: #3F3F3F;\n      font-size: 0.875rem;\n      padding: 1rem 0.5rem;\n    }\n  }\n`;\nconst Button = styled.a`\n  display: block;\n  max-width: 80px;\n  padding: 1rem 3rem;\n  background-image: linear-gradient(40deg, #28BCFD 20%, #1D78FF 51%, #28BCFD 90%);\n  border-radius: 5px;\n  text-align: center;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst ModalWrapper = styled.div`\n  width: 100%;\n  padding: 30px 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  & > a {\n    max-width: none;\n  }\n`;\n\nfunction PersonalToken({\n  history\n}) {\n  const [tokenForm, setTokenForm] = useState({\n    \"name\": \"\",\n    \"symbol\": \"\",\n    \"stamp\": \"\",\n    \"decimals\": 6,\n    \"initialSupply\": 60000 * 10 ** 6,\n    \"cap\": 240000 * 10 ** 6\n  });\n  const [showModal, setShowModal] = useState(false);\n  const [newTokenTransaction, setNewTokenTransaction] = useState();\n  const {\n    account\n  } = useWeb3React();\n  const factory = useFactoryContract();\n\n  const handleChange = event => {\n    setTokenForm({ ...tokenForm,\n      [event.target.id]: event.target.value\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onCreateToken(tokenForm);\n  };\n  /**\n   * Converts React HTML Components to PDF\n   * @param {*} html\n   */\n\n\n  const htmlToPDF = html => {\n    const getTextFromChildren = (children, depth = 0) => {\n      if (!children || !children.map || typeof children === 'string') return children;\n      if (children[0] && children[0].props && children[0].props.children && typeof children[0].props.children === 'string') return children[0].props.children;\n      let listCounter = 1;\n      let content = [];\n      children.map(c => {\n        const style = c.key.split('-')[0];\n        let text = [];\n\n        switch (style) {\n          case 'list':\n            text.push(`${listCounter}. `);\n            listCounter++;\n            text.push({\n              text: getTextFromChildren(c.props.children, depth + 1)\n            });\n            break;\n\n          case 'listItem':\n          case 'paragraph':\n            text.push({\n              text: getTextFromChildren(c.props.children, depth + 1)\n            });\n            text.push('\\n');\n            break;\n\n          case 'strong':\n            text = getTextFromChildren(c.props.children, depth + 1);\n            break;\n\n          default:\n            text.push({\n              text: getTextFromChildren(c.props.children, depth + 1)\n            });\n        }\n\n        content.push({\n          text,\n          style\n        });\n        if (depth === 0) content.push('\\n');\n        return c;\n      });\n      return content;\n    };\n\n    return new Promise((resolve, reject) => {\n      let content = getTextFromChildren(html.props.children);\n      const styles = {\n        heading: {\n          fontSize: 22,\n          bold: true\n        },\n        strong: {\n          bold: true\n        }\n      };\n      const pdfDocGenerator = pdfMake.createPdf({\n        content,\n        styles\n      }); // pdfDocGenerator.getBlob((data) => {\n\n      pdfDocGenerator.getBase64(data => {\n        resolve({\n          data\n        });\n      });\n    });\n  };\n  /**\n   * Generates default TOS PDF and uploads to Fleek\n   * @param {*} token\n   */\n\n\n  function generateDefaultTOSUrl(token) {\n    return new Promise(async (resolve, reject) => {\n      // Fetch default template\n      const templateUrl = 'https://raw.githubusercontent.com/lexDAO/LexDAO-Documents/master/TOS/Personal-Token-Default-TOS.md';\n      const templateMD = await Axios.get(templateUrl); // Adapt for\n\n      const {\n        data: templateForConversion\n      } = templateMD;\n      const template = templateForConversion.replace(/\\$\\[\\[(.*?)\\]\\]/gi, e => `{{${e.substring(3, e.length - 2).replace(/\\s/gi, '_')}}}`); // Populate Variables\n\n      const hbTemplate = await Handlebars.compile(template); // Adjust token vars for template insertion\n\n      const tosVars = {\n        'token_name': token.symbol,\n        'consultant_name': token.name,\n        'consultant_address': account\n      }; // Create Markdown TOS with inserted variables\n\n      const mkTOS = await hbTemplate(tosVars); // Create HTML TOS with inserted variables\n\n      const htmlTOS = await ReactMarkdown({\n        source: mkTOS\n      }); // Generate PDF\n\n      const pdfDoc = await htmlToPDF(htmlTOS); // Store PDF\n\n      const Key = `LexDAO-TOS/${Date.now()}-${token.symbol}.pdf`;\n      const params = {\n        Bucket: process.env.REACT_APP_FLEEK_BUCKET,\n        Key,\n        ContentType: 'application/pdf',\n        Body: new Buffer(pdfDoc.data, 'base64'),\n        ACL: 'public-read'\n      };\n      const request = await s3.putObject(params); // const response = await request.send();\n\n      let hash = {\n        url: [process.env.REACT_APP_FLEEK_BUCKET, '.storage.fleek.co/', Key].join('')\n      };\n      await request.on('httpHeaders', (statusCode, headers) => {\n        console.log({\n          statusCode\n        });\n\n        if (statusCode === 200) {\n          const ipfsHash = headers['x-fleek-ipfs-hash']; // Do stuff with ifps hash....\n\n          const ipfsHashV0 = headers['x-fleek-ipfs-hash-v0']; // Do stuff with the short v0 ipfs hash... (appropriate for storing on blockchains)\n\n          hash = { ...hash,\n            ipfsHash,\n            ipfsHashV0\n          }; // Return PDF Url\n\n          resolve(hash);\n        } else {\n          reject('Issues saving TOS.');\n        }\n      }).send();\n    });\n  }\n\n  async function onCreateToken(token) {\n    // If no TOS link provided, generate default\n    if (!token.stamp) {\n      const TOSIPFSData = await generateDefaultTOSUrl(token); // Store the Fleek URL\n\n      token.stamp = TOSIPFSData.url; // Optionally, can store the IPFS hash\n      // Just uncomment the next line\n      // token.stamp = TOSIPFSDATA.ipfsHash;\n    }\n\n    let result = await factory.newLexToken(token.name, //  new token name\n    token.symbol, //  new token symbol\n    token.stamp, //  new token terms of service\n    token.decimals, //  [constant] new token decimals\n    token.cap, //  [constant] new token maximum supply cap\n    token.initialSupply, //  [constant] new token initial supply\n    account, //  new token owner\n    true, //  [constant] new token governed by LexDAO\n    {\n      value: utils.parseEther(\"0.0009\") //  lexdao tribute\n\n    });\n    const response = await fetch(TOKEN_WEBHOOK, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        name: token.name,\n        email: token.email,\n        symbol: token.symbol,\n        stamp: token.stamp,\n        account: account,\n        transaction: result.hash\n      })\n    });\n    console.log(response);\n    console.log(result);\n\n    if (result) {\n      setNewTokenTransaction(result.hash);\n      setShowModal(true);\n    }\n\n    return token;\n  }\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: showModal,\n    onDismiss: () => setShowModal(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 11\n    }\n  }, \"You're Tokenized!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    href: \"https://rinkeby.etherscan.io/tx/\" + newTokenTransaction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }\n  }, \"View your transaction on Etherscan\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      maxWidth: \"90%\"\n    },\n    alt: \"Transaction Screenshot\",\n    src: require('../../assets/images/TxScreenshot.png'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 13\n    }\n  }, \"Wait for the transaction confirmation and follow this link \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 72\n    }\n  }, \"\\uD83D\\uDC46\")))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      gridArea: 'header',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Logo, {\n    src: require('../../assets/images/LexDAO-logo.png'),\n    alt: \"LexDAO Logo\",\n    onClick: () => history.push('/'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 9\n    }\n  }, \"Personal Token Factory\"), /*#__PURE__*/React.createElement(\"sub\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 9\n    }\n  }, \"LexDAO built. Legal engineer approved.\")), /*#__PURE__*/React.createElement(Description, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 9\n    }\n  }, \"Why use \\\"LexDAO Certified\\\" personal tokens?\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }\n  }, \"To start, this is the token code we use within LexDAO! We've used legal engineering to build in stuff like dispute resolution, token terms of service, and some standardized values that just make sense. \"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 9\n    }\n  }, \"Standardized Values:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 9\n    }\n  }, \"1 Token = 1 Minute of Your Time\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 42\n    }\n  }), \"Initial Offering: 60,000 Tokens (1,000 Hrs)\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 54\n    }\n  }), \"Total Cap: 240,000 Tokens (4,000 Hrs) \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 49\n    }\n  }), \"Decimal places: 6 \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 29\n    }\n  }), \"LexDAO Fee: .0009 ETH\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 9\n    }\n  }, \"What about disputes?\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 9\n    }\n  }, \"Having trouble with a personal token transaction? LexDAO has your back with dispute resolution built in.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 12\n    }\n  }, \"Need to start a dispute?\"), \"\\xA0\", /*#__PURE__*/React.createElement(Link, {\n    onClick: () => history.push('/personal-token-dispute'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 11\n    }\n  }, \"Click Here\")), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 9\n    }\n  }, \"Some legal stuff:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 9\n    }\n  }, \"If you do not provide your own your Terms of Service link, your token will be governed by\\xA0\", /*#__PURE__*/React.createElement(Link, {\n    id: \"link\",\n    href: \"https://hackmd.io/@LexDAO/Default-Personal-Token-TOS\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 11\n    }\n  }, \"LexDAO Default Personal Token TOS\")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 9\n    }\n  }, \"By clicking \\\"Mint\\\" you agreed to the\\xA0\", /*#__PURE__*/React.createElement(Link, {\n    id: \"link\",\n    href: \"https://hackmd.io/@LexDAO/Token-Factory-TOS\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 11\n    }\n  }, \"LexDAO Terms of Service\"), \".\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    id: \"link\",\n    href: \"https://hackmd.io/@LexDAO/why-email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 9\n    }\n  }, \"Learn why you might want to attach your email.\"))), /*#__PURE__*/React.createElement(TokenForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 11\n    }\n  }, \"Step 1: Connect a Web3 Wallet\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      maxWidth: '200px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Web3Status, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 11\n    }\n  }, \"Step 2: Complete the following form\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 9\n    }\n  }, tokenFormItems.map(item => {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      key: item.name,\n      id: item.name,\n      type: item.type,\n      placeholder: item.placeholder,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 15\n      }\n    });\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }\n  }, \"Mint\")));\n}\n\nexport default withRouter(PersonalToken);","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/src/components/PersonalToken/index.jsx"],"names":["React","useState","withRouter","styled","useFactoryContract","useWeb3React","Web3Status","utils","ReactMarkdown","Handlebars","Axios","AWS","Link","Modal","pdfMake","pdfFonts","vfs","s3","S3","apiVersion","accessKeyId","process","env","REACT_APP_FLEEK_API_KEY","secretAccessKey","REACT_APP_FLEEK_API_SECRET","endpoint","region","s3ForcePathStyle","TOKEN_WEBHOOK","REACT_APP_TOKEN_WEBHOOK","tokenFormItems","name","type","placeholder","Wrapper","div","Logo","img","Description","theme","uniswapPink","TokenForm","Button","a","ModalWrapper","PersonalToken","history","tokenForm","setTokenForm","showModal","setShowModal","newTokenTransaction","setNewTokenTransaction","account","factory","handleChange","event","target","id","value","handleSubmit","preventDefault","onCreateToken","htmlToPDF","html","getTextFromChildren","children","depth","map","props","listCounter","content","c","style","key","split","text","push","Promise","resolve","reject","styles","heading","fontSize","bold","strong","pdfDocGenerator","createPdf","getBase64","data","generateDefaultTOSUrl","token","templateUrl","templateMD","get","templateForConversion","template","replace","e","substring","length","hbTemplate","compile","tosVars","symbol","mkTOS","htmlTOS","source","pdfDoc","Key","Date","now","params","Bucket","REACT_APP_FLEEK_BUCKET","ContentType","Body","Buffer","ACL","request","putObject","hash","url","join","on","statusCode","headers","console","log","ipfsHash","ipfsHashV0","send","stamp","TOSIPFSData","result","newLexToken","decimals","cap","initialSupply","parseEther","response","fetch","method","Accept","body","JSON","stringify","email","transaction","maxWidth","require","gridArea","textAlign","item"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport { withRouter } from \"react-router-dom\"\nimport styled from \"styled-components\"\nimport { useFactoryContract, useWeb3React } from \"../../hooks\"\nimport Web3Status from \"../Web3Status\"\nimport { utils } from \"ethers\"\n\nimport ReactMarkdown from 'react-markdown';\nimport Handlebars from 'handlebars';\nimport Axios from 'axios';\n\nimport AWS from 'aws-sdk';\n\nimport { Link } from \"../../theme\"\nimport Modal from \"../Modal\"\n\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nconst s3 = new AWS.S3({\n  apiVersion: '2006-03-01',\n  accessKeyId: process.env.REACT_APP_FLEEK_API_KEY,\n  secretAccessKey: process.env.REACT_APP_FLEEK_API_SECRET,\n  endpoint: 'https://storageapi.fleek.co',\n  region: 'us-east-1',\n  s3ForcePathStyle: true\n});\n\nconst TOKEN_WEBHOOK = process.env.REACT_APP_TOKEN_WEBHOOK\n\nconst tokenFormItems = [\n  {\n    name:\"name\",\n    type: \"text\",\n    placeholder:\"Your Name\",\n  },\n  {\n    name: \"symbol\",\n    type: \"text\",\n    placeholder: \"What are your Initials? (Token Symbol)\",\n  },\n  {\n    name: \"stamp\",\n    type: \"text\",\n    placeholder: \"Terms of Service Link (Optional)\"\n  },\n  {\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Email (Optional)\"\n  }\n]\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-areas: \"header header\"\\n\"description form\";\n  grid-template-rows: 20% auto;\n  grid-template-columns: 45% 55%;\n`\n\nconst Logo = styled.img`\n  height: 50px;\n  margin-top: 15px;\n\n  :hover {\n    cursor: pointer;\n  }\n`\n\nconst Description = styled.div`\n  grid-area: description;\n  width: 80%;\n  margin: auto;\n  line-height: 1.7rem;\n  padding-left: 20%;\n\n  & > p {\n    font-size: 0.938rem;\n\n    & > a {\n      color: ${({ theme }) => theme.uniswapPink};\n      text-decoration: none;\n\n      :hover {\n        text-decoration: underline;\n      }\n    }\n  }\n`\n\nconst TokenForm = styled.div`\n  grid-area: form;\n  width: 80%;\n  margin: auto;\n  margin-top:0;\n\n  & > form {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n\n    & > input {\n      width: 80%;\n      line-height: 1.5rem;\n      margin-bottom: 3.5rem;\n      border-radius: .25rem;\n      border: 1px solid #000000;\n      color: #3F3F3F;\n      font-size: 0.875rem;\n      padding: 1rem 0.5rem;\n    }\n  }\n`\n\nconst Button = styled.a`\n  display: block;\n  max-width: 80px;\n  padding: 1rem 3rem;\n  background-image: linear-gradient(40deg, #28BCFD 20%, #1D78FF 51%, #28BCFD 90%);\n  border-radius: 5px;\n  text-align: center;\n\n  :hover {\n    cursor: pointer;\n  }\n`\n\nconst ModalWrapper = styled.div`\n  width: 100%;\n  padding: 30px 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  & > a {\n    max-width: none;\n  }\n`\n\nfunction PersonalToken({ history }) {\n  const [tokenForm, setTokenForm] = useState({\n    \"name\": \"\",\n    \"symbol\": \"\",\n    \"stamp\": \"\",\n    \"decimals\": 6,\n    \"initialSupply\": 60000 * 10 ** 6,\n    \"cap\": 240000 * 10 ** 6\n  })\n\n  const [showModal, setShowModal] = useState(false)\n\n  const [newTokenTransaction, setNewTokenTransaction] = useState()\n\n  const { account } = useWeb3React()\n\n  const factory = useFactoryContract();\n\n  const handleChange = (event) => {\n    setTokenForm({\n      ...tokenForm,\n      [event.target.id]: event.target.value\n    });\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onCreateToken(tokenForm)\n  }\n\n  /**\n   * Converts React HTML Components to PDF\n   * @param {*} html\n   */\n  const htmlToPDF = html => {\n\n    const getTextFromChildren = (children, depth = 0) => {\n      if (!children || !children.map || typeof children === 'string') return children;\n\n      if (children[0] && children[0].props && children[0].props.children && typeof children[0].props.children === 'string') return children[0].props.children;\n\n      let listCounter = 1;\n      let content = [];\n\n      children.map(c => {\n        const style = c.key.split('-')[0];\n        let text = [];\n\n        switch(style) {\n            case 'list':\n              text.push(`${listCounter}. `);\n              listCounter++;\n              text.push({text: getTextFromChildren(c.props.children, depth + 1)});\n              break;\n            case 'listItem':\n            case 'paragraph':\n              text.push({text: getTextFromChildren(c.props.children, depth + 1)});\n              text.push('\\n');\n              break;\n            case 'strong':\n              text = getTextFromChildren(c.props.children, depth + 1);\n              break;\n            default:\n              text.push({text: getTextFromChildren(c.props.children, depth + 1)});\n        }\n\n        content.push({text, style});\n\n        if (depth === 0) content.push('\\n');\n\n        return c;\n      });\n\n      return content;\n    }\n\n    return new Promise((resolve, reject) => {\n      let content = getTextFromChildren(html.props.children);\n\n      const styles = {\n        heading: {\n          fontSize: 22,\n          bold: true,\n        },\n        strong: {\n          bold: true\n        }\n      };\n\n      const pdfDocGenerator = pdfMake.createPdf({content, styles});\n      // pdfDocGenerator.getBlob((data) => {\n      pdfDocGenerator.getBase64((data) => {\n        resolve({data});\n      });\n    });\n  }\n\n  /**\n   * Generates default TOS PDF and uploads to Fleek\n   * @param {*} token\n   */\n  function generateDefaultTOSUrl(token) {\n    return new Promise (async (resolve, reject) => {\n    // Fetch default template\n    const templateUrl = 'https://raw.githubusercontent.com/lexDAO/LexDAO-Documents/master/TOS/Personal-Token-Default-TOS.md';\n    const templateMD = await Axios.get(templateUrl);\n\n    // Adapt for\n    const {data: templateForConversion} = templateMD;\n    const template = templateForConversion.replace(/\\$\\[\\[(.*?)\\]\\]/gi, e => `{{${e.substring(3,e.length-2).replace(/\\s/gi,'_')}}}`);\n\n    // Populate Variables\n    const hbTemplate = await Handlebars.compile(template);\n\n    // Adjust token vars for template insertion\n    const tosVars = {\n      'token_name': token.symbol,\n      'consultant_name': token.name,\n      'consultant_address': account,\n    }\n    // Create Markdown TOS with inserted variables\n    const mkTOS = await hbTemplate(tosVars);\n\n    // Create HTML TOS with inserted variables\n    const htmlTOS = await ReactMarkdown({source: mkTOS})\n\n    // Generate PDF\n    const pdfDoc = await htmlToPDF(htmlTOS);\n\n    // Store PDF\n    const Key = `LexDAO-TOS/${Date.now()}-${token.symbol}.pdf`;\n    const params = {\n      Bucket: process.env.REACT_APP_FLEEK_BUCKET,\n      Key,\n      ContentType: 'application/pdf',\n      Body: new Buffer(pdfDoc.data, 'base64'),\n      ACL: 'public-read'\n    };\n    const request = await s3.putObject(params);\n    // const response = await request.send();\n\n    let hash = {url: [process.env.REACT_APP_FLEEK_BUCKET,'.storage.fleek.co/',Key].join('')};\n    await request.on('httpHeaders', (statusCode, headers) => {\n      console.log({statusCode});\n      if (statusCode === 200) {\n        const ipfsHash = headers['x-fleek-ipfs-hash'];\n        // Do stuff with ifps hash....\n        const ipfsHashV0 = headers['x-fleek-ipfs-hash-v0'];\n        // Do stuff with the short v0 ipfs hash... (appropriate for storing on blockchains)\n\n        hash = {...hash, ipfsHash, ipfsHashV0};\n\n        // Return PDF Url\n        resolve(hash);\n      } else {\n        reject('Issues saving TOS.')\n      }\n    }).send();\n    })\n  }\n\n  async function onCreateToken(token) {\n\n    // If no TOS link provided, generate default\n    if (!token.stamp) {\n      const TOSIPFSData = await generateDefaultTOSUrl(token);\n\n      // Store the Fleek URL\n      token.stamp = TOSIPFSData.url;\n\n      // Optionally, can store the IPFS hash\n      // Just uncomment the next line\n      // token.stamp = TOSIPFSDATA.ipfsHash;\n    }\n\n    let result = await factory.newLexToken(\n      token.name,                                     //  new token name\n      token.symbol,                                   //  new token symbol\n      token.stamp,                                    //  new token terms of service\n      token.decimals,                                 //  [constant] new token decimals\n      token.cap,                                      //  [constant] new token maximum supply cap\n      token.initialSupply,                            //  [constant] new token initial supply\n      account,                                        //  new token owner\n      true,                                           //  [constant] new token governed by LexDAO\n      {\n        value: utils.parseEther(\"0.0009\")             //  lexdao tribute\n      }\n    )\n\n    const response = await fetch(TOKEN_WEBHOOK, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n      },\n      body: JSON.stringify({\n        name: token.name,\n        email: token.email,\n        symbol: token.symbol,\n        stamp: token.stamp,\n        account: account,\n        transaction: result.hash,\n      })\n    });\n\n    console.log(response);\n    console.log(result);\n\n    if (result) {\n      setNewTokenTransaction(result.hash)\n      setShowModal(true)\n    }\n\n    return token;\n  }\n\n  return(\n    <Wrapper>\n      <Modal\n        isOpen={showModal}\n        onDismiss={() => setShowModal(false)}\n      >\n        <ModalWrapper>\n          <h2>You're Tokenized!</h2>\n          <p></p>\n          <p>\n            <Link href={\"https://rinkeby.etherscan.io/tx/\" + newTokenTransaction}>\n              View your transaction on Etherscan\n            </Link>\n          </p>\n          <br></br>\n            <img style={{maxWidth: \"90%\"}} alt={\"Transaction Screenshot\"} src={require('../../assets/images/TxScreenshot.png')}/>\n            <p>\n            Wait for the transaction confirmation and follow this link <span>👆</span>\n          </p>\n\n          {/*<Button\n            onClick={() => history.push('/')}\n          >\n            Learn More\n          </Button> */}\n\n        </ModalWrapper>\n      </Modal>\n      <div style={{ gridArea: 'header', textAlign: 'center' }}>\n        <Logo\n          src={require('../../assets/images/LexDAO-logo.png')}\n          alt=\"LexDAO Logo\"\n          onClick={() => history.push('/')}\n        />\n        <h1>Personal Token Factory</h1>\n        <sub>LexDAO built. Legal engineer approved.</sub>\n      </div>\n      <Description>\n        <h3>Why use \"LexDAO Certified\" personal tokens?</h3>\n        <p>To start, this is the token code we use within LexDAO! We've used legal engineering to build in stuff like dispute resolution, token terms of service, and some standardized values that just make sense. </p>\n\n        <h3>Standardized Values:</h3>\n        <p>\n          1 Token = 1 Minute of Your Time<br />\n          Initial Offering: 60,000 Tokens (1,000 Hrs)<br />\n          Total Cap: 240,000 Tokens (4,000 Hrs) <br />\n          Decimal places: 6 <br />\n          LexDAO Fee: .0009 ETH\n        </p>\n\n        <h3>What about disputes?</h3>\n        <p>Having trouble with a personal token transaction? LexDAO has your back with dispute resolution built in.</p>\n        <p><strong>Need to start a dispute?</strong>&nbsp;\n          <Link onClick={() => history.push('/personal-token-dispute')}>\n            Click Here\n          </Link>\n        </p>\n\n        <h3>Some legal stuff:</h3>\n        <p>If you do not provide your own your Terms of Service link, your token will be governed by&nbsp;\n          <Link id=\"link\" href=\"https://hackmd.io/@LexDAO/Default-Personal-Token-TOS\">\n            LexDAO Default Personal Token TOS\n          </Link>\n        </p>\n        <p>By clicking \"Mint\" you agreed to the&nbsp;\n          <Link id=\"link\" href=\"https://hackmd.io/@LexDAO/Token-Factory-TOS\">\n            LexDAO Terms of Service\n          </Link>.\n        </p>\n        <p>\n        <Link id=\"link\" href=\"https://hackmd.io/@LexDAO/why-email\">\n            Learn why you might want to attach your email.\n          </Link>\n        </p>\n      </Description>\n      <TokenForm>\n\n        <div>\n          <h3>Step 1: Connect a Web3 Wallet</h3>\n          <div style={{ maxWidth: '200px' }}>\n            <Web3Status />\n          </div>\n          <h3>Step 2: Complete the following form</h3>\n        </div>\n        <form>\n          {tokenFormItems.map(item => {\n            return(\n              <input\n                key={item.name}\n                id={item.name}\n                type={item.type}\n                placeholder={item.placeholder}\n                onChange={handleChange}\n              />\n            )\n          })}\n        </form>\n        <Button\n          onClick={handleSubmit}\n        >\n          Mint\n        </Button>\n      </TokenForm>\n    </Wrapper>\n  )\n}\n\nexport default withRouter(PersonalToken)\n"]},"metadata":{},"sourceType":"module"}