{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport Web3ProviderEngine from 'web3-provider-engine';\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js';\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider';\nimport invariant from 'tiny-invariant';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar NetworkConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(NetworkConnector, _AbstractConnector);\n\n  function NetworkConnector(_ref) {\n    var _this;\n\n    var urls = _ref.urls,\n        defaultChainId = _ref.defaultChainId,\n        pollingInterval = _ref.pollingInterval,\n        requestTimeoutMs = _ref.requestTimeoutMs;\n    !(defaultChainId || Object.keys(urls).length === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'defaultChainId is a required argument with >1 url') : invariant(false) : void 0;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: Object.keys(urls).map(function (k) {\n        return Number(k);\n      })\n    }) || this;\n    _this.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\n    _this.pollingInterval = pollingInterval;\n    _this.requestTimeoutMs = requestTimeoutMs;\n    _this.providers = Object.keys(urls).reduce(function (accumulator, chainId) {\n      var _Object$assign;\n\n      var engine = new Web3ProviderEngine({\n        pollingInterval: _this.pollingInterval\n      });\n      engine.addProvider(new CacheSubprovider());\n      engine.addProvider(new RPCSubprovider(urls[Number(chainId)], _this.requestTimeoutMs));\n      return Object.assign(accumulator, (_Object$assign = {}, _Object$assign[Number(chainId)] = engine, _Object$assign));\n    }, {});\n    _this.active = false;\n    return _this;\n  }\n\n  var _proto = NetworkConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _this3 = this;\n\n      _this3.providers[_this3.currentChainId].start();\n\n      _this3.active = true;\n      return Promise.resolve({\n        provider: _this3.providers[_this3.currentChainId],\n        chainId: _this3.currentChainId,\n        account: null\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.providers[_this5.currentChainId]);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.currentChainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    return Promise.resolve(null);\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.providers[this.currentChainId].stop();\n    this.active = false;\n  };\n\n  _proto.changeChainId = function changeChainId(chainId) {\n    !Object.keys(this.providers).includes(chainId.toString()) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"No url found for chainId \" + chainId) : invariant(false) : void 0;\n\n    if (this.active) {\n      this.providers[this.currentChainId].stop();\n      this.currentChainId = chainId;\n      this.providers[this.currentChainId].start();\n      this.emitUpdate({\n        provider: this.providers[this.currentChainId],\n        chainId: chainId\n      });\n    } else {\n      this.currentChainId = chainId;\n    }\n  };\n\n  return NetworkConnector;\n}(AbstractConnector);\n\nexport { NetworkConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["NetworkConnector","urls","defaultChainId","pollingInterval","requestTimeoutMs","Object","supportedChainIds","Number","engine","provider","chainId","account","deactivate","changeChainId"],"mappings":";;;;;;;;;;;;IAcaA,gBAAb,GAAA,aAAA,UAAA,kBAAA,EAAA;AAAA,EAAA,cAAA,CAAA,gBAAA,EAAA,kBAAA,CAAA;;AAOE,WAAA,gBAAA,CAAA,IAAA,EAAA;;;QAAcC,IAAAA,GAAAA,IAAAA,CAAAA,I;QAAMC,cAAAA,GAAAA,IAAAA,CAAAA,c;QAAgBC,eAAAA,GAAAA,IAAAA,CAAAA,e;QAAiBC,gBAAAA,GAAAA,IAAAA,CAAAA,gB;AACnD,MAAUF,cAAc,IAAIG,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,KAA5B,CAAA,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,mDAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AACA,IAAA,KAAA,GAAA,kBAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AAAEC,MAAAA,iBAAiB,EAAE,MAAM,CAAN,IAAA,CAAA,IAAA,EAAA,GAAA,CAAsB,UAAA,CAAA,EAAA;AAAA,eAAeC,MAAM,CAArB,CAAqB,CAArB;AAAtB,OAAA;AAArB,KAAN,KAAA,IAAA;AAEA,IAAA,KAAA,CAAA,cAAA,GAAsBL,cAAc,IAAIK,MAAM,CAACF,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAA/C,CAA+CA,CAAD,CAA9C;AACA,IAAA,KAAA,CAAA,eAAA,GAAA,eAAA;AACA,IAAA,KAAA,CAAA,gBAAA,GAAA,gBAAA;AACA,IAAA,KAAA,CAAA,SAAA,GAAiB,MAAM,CAAN,IAAA,CAAA,IAAA,EAAA,MAAA,CAAyB,UAAA,WAAA,EAAA,OAAA,EAAA;;;AACxC,UAAMG,MAAM,GAAG,IAAA,kBAAA,CAAuB;AAAEL,QAAAA,eAAe,EAAE,KAAA,CAAKA;AAAxB,OAAvB,CAAf;AACAK,MAAAA,MAAM,CAANA,WAAAA,CAAmB,IAAnBA,gBAAmB,EAAnBA;AACAA,MAAAA,MAAM,CAANA,WAAAA,CAAmB,IAAA,cAAA,CAAmBP,IAAI,CAACM,MAAM,CAA9B,OAA8B,CAAP,CAAvB,EAA0C,KAAA,CAA7DC,gBAAmB,CAAnBA;AACA,aAAOH,MAAM,CAANA,MAAAA,CAAAA,WAAAA,GAAAA,cAAAA,GAAAA,EAAAA,EAAAA,cAAAA,CAA8BE,MAAM,CAApCF,OAAoC,CAApCA,CAAAA,GAAAA,MAAAA,EAAP,cAAOA,EAAP;AAJe,KAAA,EAAjB,EAAiB,CAAjB;AAMA,IAAA,KAAA,CAAA,MAAA,GAAA,KAAA;;AACD;;AArBH,MAAA,MAAA,GAAA,gBAAA,CAAA,SAAA;;AAAA,EAAA,MAAA,CAAA,QAAA,GAAA,SAAA,QAAA,GAAA;AAAA,QAAA;mBAwBI,I;;AAAA,MAAA,MAAA,CAAA,SAAA,CAAe,MAAA,CAAf,cAAA,EAAA,KAAA;;AACA,MAAA,MAAA,CAAA,MAAA,GAAA,IAAA;AACA,aAAA,OAAA,CAAA,OAAA,CAAO;AAAEI,QAAAA,QAAQ,EAAE,MAAA,CAAA,SAAA,CAAe,MAAA,CAA3B,cAAY,CAAZ;AAAiDC,QAAAA,OAAO,EAAE,MAAA,CAA1D,cAAA;AAA+EC,QAAAA,OAAO,EAAE;AAAxF,OAAP,CAAA;AA1BJ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CAAA,WAAA,GAAA,SAAA,WAAA,GAAA;AAAA,QAAA;mBA8BW,I;;AAAP,aAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAA,SAAA,CAAe,MAAA,CAAtB,cAAO,CAAP,CAAA;AA9BJ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GAAA,SAAA,UAAA,GAAA;AAAA,QAAA;mBAkCW,I;;AAAP,aAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAP,cAAA,CAAA;AAlCJ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GAAA,SAAA,UAAA,GAAA;AAsCI,WAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AAtCJ,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GAyCSC,SAAAA,UAAAA,GAAAA;AACL,SAAA,SAAA,CAAe,KAAf,cAAA,EAAA,IAAA;AACA,SAAA,MAAA,GAAA,KAAA;AA3CJ,GAAA;;AAAA,EAAA,MAAA,CAAA,aAAA,GA8CSC,SAAAA,aAAAA,CAAAA,OAAAA,EAAAA;AACL,KAAUR,MAAM,CAANA,IAAAA,CAAY,KAAZA,SAAAA,EAAAA,QAAAA,CAAqCK,OAAO,CAAtD,QAA+CA,EAArCL,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAA,8BAAT,OAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;;AACA,QAAI,KAAJ,MAAA,EAAiB;AACf,WAAA,SAAA,CAAe,KAAf,cAAA,EAAA,IAAA;AACA,WAAA,cAAA,GAAA,OAAA;AACA,WAAA,SAAA,CAAe,KAAf,cAAA,EAAA,KAAA;AACA,WAAA,UAAA,CAAgB;AAAEI,QAAAA,QAAQ,EAAE,KAAA,SAAA,CAAe,KAA3B,cAAY,CAAZ;AAAiDC,QAAAA,OAAO,EAAPA;AAAjD,OAAhB;AAJF,KAAA,MAKO;AACL,WAAA,cAAA,GAAA,OAAA;AACD;AAvDL,GAAA;;AAAA,SAAA,gBAAA;AAAA,CAAA,CAAA,iBAAA,C","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport Web3ProviderEngine from 'web3-provider-engine'\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js'\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport invariant from 'tiny-invariant'\n\ninterface NetworkConnectorArguments {\n  urls: { [chainId: number]: string }\n  defaultChainId?: number\n  pollingInterval?: number\n  requestTimeoutMs?: number\n}\n\nexport class NetworkConnector extends AbstractConnector {\n  private readonly providers: { [chainId: number]: any }\n  private currentChainId: number\n  private readonly pollingInterval?: number\n  private readonly requestTimeoutMs?: number\n  private active: boolean\n\n  constructor({ urls, defaultChainId, pollingInterval, requestTimeoutMs }: NetworkConnectorArguments) {\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url')\n    super({ supportedChainIds: Object.keys(urls).map((k): number => Number(k)) })\n\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0])\n    this.pollingInterval = pollingInterval\n    this.requestTimeoutMs = requestTimeoutMs\n    this.providers = Object.keys(urls).reduce((accumulator, chainId) => {\n      const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval })\n      engine.addProvider(new CacheSubprovider())\n      engine.addProvider(new RPCSubprovider(urls[Number(chainId)], this.requestTimeoutMs))\n      return Object.assign(accumulator, { [Number(chainId)]: engine })\n    }, {})\n    this.active = false\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    this.providers[this.currentChainId].start()\n    this.active = true\n    return { provider: this.providers[this.currentChainId], chainId: this.currentChainId, account: null }\n  }\n\n  public async getProvider(): Promise<Web3ProviderEngine> {\n    return this.providers[this.currentChainId]\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.currentChainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return null\n  }\n\n  public deactivate() {\n    this.providers[this.currentChainId].stop()\n    this.active = false\n  }\n\n  public changeChainId(chainId: number) {\n    invariant(Object.keys(this.providers).includes(chainId.toString()), `No url found for chainId ${chainId}`)\n    if (this.active) {\n      this.providers[this.currentChainId].stop()\n      this.currentChainId = chainId\n      this.providers[this.currentChainId].start()\n      this.emitUpdate({ provider: this.providers[this.currentChainId], chainId })\n    } else {\n      this.currentChainId = chainId\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}