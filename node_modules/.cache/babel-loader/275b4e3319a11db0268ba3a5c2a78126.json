{"ast":null,"code":"'use strict';\n\nexports.__esModule = true; // istanbul ignore next\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n} // istanbul ignore next\n\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nvar _handlebarsBase = require('./handlebars/base');\n\nvar base = _interopRequireWildcard(_handlebarsBase); // Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\n\n\nvar _handlebarsSafeString = require('./handlebars/safe-string');\n\nvar _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);\n\nvar _handlebarsException = require('./handlebars/exception');\n\nvar _handlebarsException2 = _interopRequireDefault(_handlebarsException);\n\nvar _handlebarsUtils = require('./handlebars/utils');\n\nvar Utils = _interopRequireWildcard(_handlebarsUtils);\n\nvar _handlebarsRuntime = require('./handlebars/runtime');\n\nvar runtime = _interopRequireWildcard(_handlebarsRuntime);\n\nvar _handlebarsNoConflict = require('./handlebars/no-conflict');\n\nvar _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict); // For compatibility and usage outside of module systems, make the Handlebars object a namespace\n\n\nfunction create() {\n  var hb = new base.HandlebarsEnvironment();\n  Utils.extend(hb, base);\n  hb.SafeString = _handlebarsSafeString2['default'];\n  hb.Exception = _handlebarsException2['default'];\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n  hb.VM = runtime;\n\n  hb.template = function (spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nvar inst = create();\ninst.create = create;\n\n_handlebarsNoConflict2['default'](inst);\n\ninst['default'] = inst;\nexports['default'] = inst;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../lib/handlebars.runtime.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAAsB,mB;;IAAV,IAAI,GAAA,uBAAA,CAAA,eAAA,C;;;;oCAIO,0B;;;;mCACD,wB;;;;+BACC,oB;;IAAX,KAAK,GAAA,uBAAA,CAAA,gBAAA,C;;iCACQ,sB;;IAAb,OAAO,GAAA,uBAAA,CAAA,kBAAA,C;;oCAEI,0B;;;;;AAGvB,SAAS,MAAT,GAAkB;AAChB,MAAI,EAAE,GAAG,IAAI,IAAI,CAAC,qBAAT,EAAT;AAEA,EAAA,KAAK,CAAC,MAAN,CAAa,EAAb,EAAiB,IAAjB;AACA,EAAA,EAAE,CAAC,UAAH,GAAa,sBAAA,CAAA,SAAA,CAAb;AACA,EAAA,EAAE,CAAC,SAAH,GAAY,qBAAA,CAAA,SAAA,CAAZ;AACA,EAAA,EAAE,CAAC,KAAH,GAAW,KAAX;AACA,EAAA,EAAE,CAAC,gBAAH,GAAsB,KAAK,CAAC,gBAA5B;AAEA,EAAA,EAAE,CAAC,EAAH,GAAQ,OAAR;;AACA,EAAA,EAAE,CAAC,QAAH,GAAc,UAAS,IAAT,EAAe;AAC3B,WAAO,OAAO,CAAC,QAAR,CAAiB,IAAjB,EAAuB,EAAvB,CAAP;AACD,GAFD;;AAIA,SAAO,EAAP;AACD;;AAED,IAAI,IAAI,GAAG,MAAM,EAAjB;AACA,IAAI,CAAC,MAAL,GAAc,MAAd;;AAEA,sBAAA,CAAA,SAAA,CAAA,CAAW,IAAX;;AAEA,IAAI,CAAC,SAAD,CAAJ,GAAkB,IAAlB;qBAEe,I","sourcesContent":["import * as base from './handlebars/base';\n\n// Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\nimport SafeString from './handlebars/safe-string';\nimport Exception from './handlebars/exception';\nimport * as Utils from './handlebars/utils';\nimport * as runtime from './handlebars/runtime';\n\nimport noConflict from './handlebars/no-conflict';\n\n// For compatibility and usage outside of module systems, make the Handlebars object a namespace\nfunction create() {\n  let hb = new base.HandlebarsEnvironment();\n\n  Utils.extend(hb, base);\n  hb.SafeString = SafeString;\n  hb.Exception = Exception;\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n\n  hb.VM = runtime;\n  hb.template = function(spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nlet inst = create();\ninst.create = create;\n\nnoConflict(inst);\n\ninst['default'] = inst;\n\nexport default inst;\n"]},"metadata":{},"sourceType":"script"}