{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport { PortisConnector } from '@web3-react/portis-connector';\nimport { TorusConnector } from '@web3-react/torus-connector';\nimport { NetworkConnector } from './Network';\nimport { FortmaticConnector } from './Fortmatic';\nconst POLLING_INTERVAL = 10000;\nconst NETWORK_URL = process.env.REACT_APP_IS_PRODUCTION_DEPLOY === 'true' ? process.env.REACT_APP_NETWORK_URL_PROD : process.env.REACT_APP_NETWORK_URL;\nexport const network = new NetworkConnector({\n  urls: {\n    [Number(process.env.REACT_APP_CHAIN_ID)]: NETWORK_URL\n  },\n  pollingInterval: POLLING_INTERVAL * 3\n});\nexport const injected = new InjectedConnector({\n  supportedChainIds: [Number(process.env.REACT_APP_CHAIN_ID)]\n}); // mainnet only\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: {\n    1: NETWORK_URL\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: false,\n  pollingInterval: POLLING_INTERVAL\n}); // mainnet only\n\nexport const fortmatic = new FortmaticConnector({\n  apiKey: process.env.REACT_APP_FORTMATIC_KEY,\n  chainId: 1\n}); // mainnet only\n\nexport const portis = new PortisConnector({\n  dAppId: process.env.REACT_APP_PORTIS_ID,\n  networks: [1]\n});\nexport const torus = new TorusConnector({\n  chainId: 1,\n  initOptions: {\n    showTorusButton: false\n  }\n}); // mainnet only\n\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl: 'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg'\n});","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/src/connectors/index.js"],"names":["InjectedConnector","WalletConnectConnector","WalletLinkConnector","PortisConnector","TorusConnector","NetworkConnector","FortmaticConnector","POLLING_INTERVAL","NETWORK_URL","process","env","REACT_APP_IS_PRODUCTION_DEPLOY","REACT_APP_NETWORK_URL_PROD","REACT_APP_NETWORK_URL","network","urls","Number","REACT_APP_CHAIN_ID","pollingInterval","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","fortmatic","apiKey","REACT_APP_FORTMATIC_KEY","chainId","portis","dAppId","REACT_APP_PORTIS_ID","networks","torus","initOptions","showTorusButton","walletlink","url","appName","appLogoUrl"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,cAAT,QAA+B,6BAA/B;AAEA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAASC,kBAAT,QAAmC,aAAnC;AAEA,MAAMC,gBAAgB,GAAG,KAAzB;AACA,MAAMC,WAAW,GACfC,OAAO,CAACC,GAAR,CAAYC,8BAAZ,KAA+C,MAA/C,GACIF,OAAO,CAACC,GAAR,CAAYE,0BADhB,GAEIH,OAAO,CAACC,GAAR,CAAYG,qBAHlB;AAKA,OAAO,MAAMC,OAAO,GAAG,IAAIT,gBAAJ,CAAqB;AAC1CU,EAAAA,IAAI,EAAE;AAAE,KAACC,MAAM,CAACP,OAAO,CAACC,GAAR,CAAYO,kBAAb,CAAP,GAA0CT;AAA5C,GADoC;AAE1CU,EAAAA,eAAe,EAAEX,gBAAgB,GAAG;AAFM,CAArB,CAAhB;AAKP,OAAO,MAAMY,QAAQ,GAAG,IAAInB,iBAAJ,CAAsB;AAC5CoB,EAAAA,iBAAiB,EAAE,CAACJ,MAAM,CAACP,OAAO,CAACC,GAAR,CAAYO,kBAAb,CAAP;AADyB,CAAtB,CAAjB,C,CAIP;;AACA,OAAO,MAAMI,aAAa,GAAG,IAAIpB,sBAAJ,CAA2B;AACtDqB,EAAAA,GAAG,EAAE;AAAE,OAAGd;AAAL,GADiD;AAEtDe,EAAAA,MAAM,EAAE,kCAF8C;AAGtDC,EAAAA,MAAM,EAAE,KAH8C;AAItDN,EAAAA,eAAe,EAAEX;AAJqC,CAA3B,CAAtB,C,CAOP;;AACA,OAAO,MAAMkB,SAAS,GAAG,IAAInB,kBAAJ,CAAuB;AAC9CoB,EAAAA,MAAM,EAAEjB,OAAO,CAACC,GAAR,CAAYiB,uBAD0B;AAE9CC,EAAAA,OAAO,EAAE;AAFqC,CAAvB,CAAlB,C,CAKP;;AACA,OAAO,MAAMC,MAAM,GAAG,IAAI1B,eAAJ,CAAoB;AACxC2B,EAAAA,MAAM,EAAErB,OAAO,CAACC,GAAR,CAAYqB,mBADoB;AAExCC,EAAAA,QAAQ,EAAE,CAAC,CAAD;AAF8B,CAApB,CAAf;AAKP,OAAO,MAAMC,KAAK,GAAG,IAAI7B,cAAJ,CAAmB;AACtCwB,EAAAA,OAAO,EAAE,CAD6B;AAEtCM,EAAAA,WAAW,EAAE;AACXC,IAAAA,eAAe,EAAE;AADN;AAFyB,CAAnB,CAAd,C,CAOP;;AACA,OAAO,MAAMC,UAAU,GAAG,IAAIlC,mBAAJ,CAAwB;AAChDmC,EAAAA,GAAG,EAAE7B,WAD2C;AAEhD8B,EAAAA,OAAO,EAAE,SAFuC;AAGhDC,EAAAA,UAAU,EACR;AAJ8C,CAAxB,CAAnB","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { PortisConnector } from '@web3-react/portis-connector'\nimport { TorusConnector } from '@web3-react/torus-connector'\n\nimport { NetworkConnector } from './Network'\nimport { FortmaticConnector } from './Fortmatic'\n\nconst POLLING_INTERVAL = 10000\nconst NETWORK_URL =\n  process.env.REACT_APP_IS_PRODUCTION_DEPLOY === 'true'\n    ? process.env.REACT_APP_NETWORK_URL_PROD\n    : process.env.REACT_APP_NETWORK_URL\n\nexport const network = new NetworkConnector({\n  urls: { [Number(process.env.REACT_APP_CHAIN_ID)]: NETWORK_URL },\n  pollingInterval: POLLING_INTERVAL * 3\n})\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [Number(process.env.REACT_APP_CHAIN_ID)]\n})\n\n// mainnet only\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: NETWORK_URL },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: false,\n  pollingInterval: POLLING_INTERVAL\n})\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: process.env.REACT_APP_FORTMATIC_KEY,\n  chainId: 1\n})\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: process.env.REACT_APP_PORTIS_ID,\n  networks: [1]\n})\n\nexport const torus = new TorusConnector({\n  chainId: 1,\n  initOptions: {\n    showTorusButton: false\n  }\n})\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl:\n    'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg'\n})\n"]},"metadata":{},"sourceType":"module"}