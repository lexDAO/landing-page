{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar configured_bignumber_1 = require(\"./configured_bignumber\");\n\nvar MAX_DIGITS_IN_UNSIGNED_256_INT = 78;\n/**\n * Generates a pseudo-random 256-bit number.\n * @return  A pseudo-random 256-bit number.\n */\n\nfunction generatePseudoRandom256BitNumber() {\n  // BigNumber.random returns a pseudo-random number between 0 & 1 with a passed in number of decimal places.\n  // Source: https://mikemcl.github.io/bignumber.js/#random\n  var randomNumber = configured_bignumber_1.BigNumber.random(MAX_DIGITS_IN_UNSIGNED_256_INT);\n  var factor = new configured_bignumber_1.BigNumber(10).pow(MAX_DIGITS_IN_UNSIGNED_256_INT - 1);\n  var randomNumberScaledTo256Bits = randomNumber.times(factor).integerValue();\n  return randomNumberScaledTo256Bits;\n}\n\nexports.generatePseudoRandom256BitNumber = generatePseudoRandom256BitNumber;","map":{"version":3,"sources":["../../src/random.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,IAAM,8BAA8B,GAAG,EAAvC;AAEA;;;;;AAIA,SAAgB,gCAAhB,GAAgD;AAC5C;AACA;AACA,MAAM,YAAY,GAAG,sBAAA,CAAA,SAAA,CAAU,MAAV,CAAiB,8BAAjB,CAArB;AACA,MAAM,MAAM,GAAG,IAAI,sBAAA,CAAA,SAAJ,CAAc,EAAd,EAAkB,GAAlB,CAAsB,8BAA8B,GAAG,CAAvD,CAAf;AACA,MAAM,2BAA2B,GAAG,YAAY,CAAC,KAAb,CAAmB,MAAnB,EAA2B,YAA3B,EAApC;AACA,SAAO,2BAAP;AACH;;AAPD,OAAA,CAAA,gCAAA,GAAA,gCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar configured_bignumber_1 = require(\"./configured_bignumber\");\nvar MAX_DIGITS_IN_UNSIGNED_256_INT = 78;\n/**\n * Generates a pseudo-random 256-bit number.\n * @return  A pseudo-random 256-bit number.\n */\nfunction generatePseudoRandom256BitNumber() {\n    // BigNumber.random returns a pseudo-random number between 0 & 1 with a passed in number of decimal places.\n    // Source: https://mikemcl.github.io/bignumber.js/#random\n    var randomNumber = configured_bignumber_1.BigNumber.random(MAX_DIGITS_IN_UNSIGNED_256_INT);\n    var factor = new configured_bignumber_1.BigNumber(10).pow(MAX_DIGITS_IN_UNSIGNED_256_INT - 1);\n    var randomNumberScaledTo256Bits = randomNumber.times(factor).integerValue();\n    return randomNumberScaledTo256Bits;\n}\nexports.generatePseudoRandom256BitNumber = generatePseudoRandom256BitNumber;\n//# sourceMappingURL=random.js.map"]},"metadata":{},"sourceType":"script"}