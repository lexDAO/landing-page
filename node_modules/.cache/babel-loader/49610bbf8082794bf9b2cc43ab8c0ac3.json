{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nexport function isBytesLike(value) {\n  return isHexString(value) && !(value.length % 2) || isBytes(value);\n}\nexport function isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (value.length == null) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (v < 0 || v >= 256 || v % 1) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n  const objects = items.map(item => arrayify(item));\n  const length = objects.reduce((accum, item) => accum + item.length, 0);\n  const result = new Uint8Array(length);\n  objects.reduce((offset, object) => {\n    result.set(object, offset);\n    return offset + object.length;\n  }, 0);\n  return addSlice(result);\n}\nexport function stripZeros(value) {\n  let result = arrayify(value);\n\n  if (result.length === 0) {\n    return result;\n  } // Find the first non-zero entry\n\n\n  let start = 0;\n\n  while (start < result.length && result[start] === 0) {\n    start++;\n  } // If we started with zeros, strip them\n\n\n  if (start) {\n    result = result.slice(start);\n  }\n\n  return result;\n}\nexport function zeroPad(value, length) {\n  value = arrayify(value);\n\n  if (value.length > length) {\n    logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n  }\n\n  const result = new Uint8Array(length);\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\nexport function isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid hexlify value\");\n    let hex = \"\";\n\n    while (value) {\n      hex = HexCharacters[value & 0x0f] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = \"0\" + hex;\n      }\n\n      return \"0x\" + hex;\n    }\n\n    return \"0x00\";\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    return value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    if (value.length % 2) {\n      if (options.hexPad === \"left\") {\n        value = \"0x0\" + value.substring(2);\n      } else if (options.hexPad === \"right\") {\n        value += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    return value.toLowerCase();\n  }\n\n  if (isBytes(value)) {\n    let result = \"0x\";\n\n    for (let i = 0; i < value.length; i++) {\n      let v = value[i];\n      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n\n    return result;\n  }\n\n  return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\n\nexport function hexDataLength(data) {\n  if (typeof data !== \"string\") {\n    data = hexlify(data);\n  } else if (!isHexString(data) || data.length % 2) {\n    return null;\n  }\n\n  return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n  if (typeof data !== \"string\") {\n    data = hexlify(data);\n  } else if (!isHexString(data) || data.length % 2) {\n    logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n  }\n\n  offset = 2 + 2 * offset;\n\n  if (endOffset != null) {\n    return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n  }\n\n  return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n  let result = \"0x\";\n  items.forEach(item => {\n    result += hexlify(item).substring(2);\n  });\n  return result;\n}\nexport function hexValue(value) {\n  const trimmed = hexStripZeros(hexlify(value, {\n    hexPad: \"left\"\n  }));\n\n  if (trimmed === \"0x\") {\n    return \"0x0\";\n  }\n\n  return trimmed;\n}\nexport function hexStripZeros(value) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  }\n\n  if (!isHexString(value)) {\n    logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n  }\n\n  value = value.substring(2);\n  let offset = 0;\n\n  while (offset < value.length && value[offset] === \"0\") {\n    offset++;\n  }\n\n  return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  } else if (!isHexString(value)) {\n    logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n  }\n\n  if (value.length > 2 * length + 2) {\n    logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n  }\n\n  while (value.length < 2 * length + 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n\n  return value;\n}\nexport function splitSignature(signature) {\n  const result = {\n    r: \"0x\",\n    s: \"0x\",\n    _vs: \"0x\",\n    recoveryParam: 0,\n    v: 0\n  };\n\n  if (isBytesLike(signature)) {\n    const bytes = arrayify(signature);\n\n    if (bytes.length !== 65) {\n      logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n    } // Get the r, s and v\n\n\n    result.r = hexlify(bytes.slice(0, 32));\n    result.s = hexlify(bytes.slice(32, 64));\n    result.v = bytes[64]; // Compute recoveryParam from v\n\n    result.recoveryParam = 1 - result.v % 2; // Allow a recid to be used as the v\n\n    if (result.v < 27) {\n      if (result.v === 0 || result.v === 1) {\n        result.v += 27;\n      } else {\n        logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n      }\n    } // Compute _vs from recoveryParam and s\n\n\n    if (result.recoveryParam) {\n      bytes[32] |= 0x80;\n    }\n\n    result._vs = hexlify(bytes.slice(32, 64));\n  } else {\n    result.r = signature.r;\n    result.s = signature.s;\n    result.v = signature.v;\n    result.recoveryParam = signature.recoveryParam;\n    result._vs = signature._vs; // If the _vs is available, use it to populate missing s, v and recoveryParam\n    // and verify non-missing s, v and recoveryParam\n\n    if (result._vs != null) {\n      const vs = zeroPad(arrayify(result._vs), 32);\n      result._vs = hexlify(vs); // Set or check the recid\n\n      const recoveryParam = vs[0] >= 128 ? 1 : 0;\n\n      if (result.recoveryParam == null) {\n        result.recoveryParam = recoveryParam;\n      } else if (result.recoveryParam !== recoveryParam) {\n        logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n      } // Set or check the s\n\n\n      vs[0] &= 0x7f;\n      const s = hexlify(vs);\n\n      if (result.s == null) {\n        result.s = s;\n      } else if (result.s !== s) {\n        logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n      }\n    } // Use recid and v to populate each other\n\n\n    if (result.recoveryParam == null) {\n      if (result.v == null) {\n        logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n      } else {\n        result.recoveryParam = 1 - result.v % 2;\n      }\n    } else {\n      if (result.v == null) {\n        result.v = 27 + result.recoveryParam;\n      } else if (result.recoveryParam !== 1 - result.v % 2) {\n        logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n      }\n    }\n\n    if (result.r == null || !isHexString(result.r)) {\n      logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n    } else {\n      result.r = hexZeroPad(result.r, 32);\n    }\n\n    if (result.s == null || !isHexString(result.s)) {\n      logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n    } else {\n      result.s = hexZeroPad(result.s, 32);\n    }\n\n    const vs = arrayify(result.s);\n\n    if (vs[0] >= 128) {\n      logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n    }\n\n    if (result.recoveryParam) {\n      vs[0] |= 0x80;\n    }\n\n    const _vs = hexlify(vs);\n\n    if (result._vs) {\n      if (!isHexString(result._vs)) {\n        logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n      }\n\n      result._vs = hexZeroPad(result._vs, 32);\n    } // Set or check the _vs\n\n\n    if (result._vs == null) {\n      result._vs = _vs;\n    } else if (result._vs !== _vs) {\n      logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n    }\n  }\n\n  return result;\n}\nexport function joinSignature(signature) {\n  signature = splitSignature(signature);\n  return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? \"0x1c\" : \"0x1b\"]));\n}","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/node_modules/@ethersproject/bytes/lib.esm/index.js"],"names":["Logger","version","logger","isHexable","value","toHexString","addSlice","array","slice","args","Array","prototype","call","arguments","Uint8Array","apply","isBytesLike","isHexString","length","isBytes","constructor","i","v","arrayify","options","checkSafeUint53","result","unshift","parseInt","String","push","allowMissingPrefix","substring","hex","hexPad","throwArgumentError","concat","items","objects","map","item","reduce","accum","offset","object","set","stripZeros","start","zeroPad","match","HexCharacters","hexlify","Math","floor","toLowerCase","hexDataLength","data","hexDataSlice","endOffset","hexConcat","forEach","hexValue","trimmed","hexStripZeros","hexZeroPad","splitSignature","signature","r","s","_vs","recoveryParam","bytes","vs","joinSignature"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (value.length == null) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (v < 0 || v >= 256 || (v % 1)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0x0f] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else if (result.recoveryParam !== (1 - (result.v % 2))) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n"]},"metadata":{},"sourceType":"module"}