{"ast":null,"code":"\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    const missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nexport var ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficien funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n})(ErrorCode || (ErrorCode = {}));\n\n;\nexport class Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n\n    console.log.apply(console, args);\n  }\n\n  debug(...args) {\n    this._log(Logger.levels.DEBUG, args);\n  }\n\n  info(...args) {\n    this._log(Logger.levels.INFO, args);\n  }\n\n  warn(...args) {\n    this._log(Logger.levels.WARNING, args);\n  }\n\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n\n    if (!params) {\n      params = {};\n    }\n\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      try {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    } // @TODO: Any??\n\n\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n\n  checkNormalize(message) {\n    if (message == null) {\n      message = \"platform missing String.prototype.normalize\";\n    }\n\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (message == null) {\n      message = \"value not safe\";\n    }\n\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version);\n    }\n\n    return _globalLogger;\n  }\n\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel];\n\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n\n    _logLevel = level;\n  }\n\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/node_modules/@ethersproject/logger/lib.esm/index.js"],"names":["_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","version","_globalLogger","_checkNormalize","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","Logger","constructor","Object","defineProperty","enumerable","value","writable","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","key","JSON","stringify","toString","reason","throwError","name","INVALID_ARGUMENT","argument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","NUMERIC_FAULT","fault","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","MISSING_NEW","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel"],"mappings":"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","sourcesContent":["\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficien funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n})(ErrorCode || (ErrorCode = {}));\n;\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            try {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n"]},"metadata":{},"sourceType":"module"}