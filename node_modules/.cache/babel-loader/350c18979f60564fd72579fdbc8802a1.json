{"ast":null,"code":"import _slicedToArray from\"/Users/kerp/Documents/GitHub/landing-page/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{BigNumber}from'@uniswap/sdk';// returns a deep copied + sorted list of values, as well as a sortmap\nexport function sortBigNumbers(values){var valueMap=values.map(function(value,i){return{value:value,i:i};});valueMap.sort(function(a,b){if(a.value.isGreaterThan(b.value)){return 1;}else if(a.value.isLessThan(b.value)){return-1;}else{return 0;}});return[valueMap.map(function(element){return values[element.i];}),values.map(function(_,i){return valueMap.findIndex(function(element){return element.i===i;});})];}export function getMedian(values){var _sortBigNumbers=sortBigNumbers(values),_sortBigNumbers2=_slicedToArray(_sortBigNumbers,2),sortedValues=_sortBigNumbers2[0],sortMap=_sortBigNumbers2[1];if(values.length%2===0){var middle=values.length/2;var indices=[middle-1,middle];return[sortedValues[middle-1].plus(sortedValues[middle]).dividedBy(2),sortMap.map(function(element){return indices.includes(element)?new BigNumber(0.5):new BigNumber(0);})];}else{var _middle=Math.floor(values.length/2);return[sortedValues[_middle],sortMap.map(function(element){return element===_middle?new BigNumber(1):new BigNumber(0);})];}}export function getMean(values,_weights){var weights=_weights?_weights:values.map(function(){return new BigNumber(1);});var weightedValues=values.map(function(value,i){return value.multipliedBy(weights[i]);});var numerator=weightedValues.reduce(function(accumulator,currentValue){return accumulator.plus(currentValue);},new BigNumber(0));var denominator=weights.reduce(function(accumulator,currentValue){return accumulator.plus(currentValue);},new BigNumber(0));return[numerator.dividedBy(denominator),weights.map(function(weight){return weight.dividedBy(denominator);})];}","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/src/utils/math.js"],"names":["BigNumber","sortBigNumbers","values","valueMap","map","value","i","sort","a","b","isGreaterThan","isLessThan","element","_","findIndex","getMedian","sortedValues","sortMap","length","middle","indices","plus","dividedBy","includes","Math","floor","getMean","_weights","weights","weightedValues","multipliedBy","numerator","reduce","accumulator","currentValue","denominator","weight"],"mappings":"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","sourcesContent":["import { BigNumber } from '@uniswap/sdk'\n\n// returns a deep copied + sorted list of values, as well as a sortmap\nexport function sortBigNumbers(values) {\n  const valueMap = values.map((value, i) => ({ value, i }))\n\n  valueMap.sort((a, b) => {\n    if (a.value.isGreaterThan(b.value)) {\n      return 1\n    } else if (a.value.isLessThan(b.value)) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n\n  return [\n    valueMap.map(element => values[element.i]),\n    values.map((_, i) => valueMap.findIndex(element => element.i === i))\n  ]\n}\n\nexport function getMedian(values) {\n  const [sortedValues, sortMap] = sortBigNumbers(values)\n  if (values.length % 2 === 0) {\n    const middle = values.length / 2\n    const indices = [middle - 1, middle]\n    return [\n      sortedValues[middle - 1].plus(sortedValues[middle]).dividedBy(2),\n      sortMap.map(element => (indices.includes(element) ? new BigNumber(0.5) : new BigNumber(0)))\n    ]\n  } else {\n    const middle = Math.floor(values.length / 2)\n    return [sortedValues[middle], sortMap.map(element => (element === middle ? new BigNumber(1) : new BigNumber(0)))]\n  }\n}\n\nexport function getMean(values, _weights) {\n  const weights = _weights ? _weights : values.map(() => new BigNumber(1))\n\n  const weightedValues = values.map((value, i) => value.multipliedBy(weights[i]))\n  const numerator = weightedValues.reduce(\n    (accumulator, currentValue) => accumulator.plus(currentValue),\n    new BigNumber(0)\n  )\n  const denominator = weights.reduce((accumulator, currentValue) => accumulator.plus(currentValue), new BigNumber(0))\n\n  return [numerator.dividedBy(denominator), weights.map(weight => weight.dividedBy(denominator))]\n}\n"]},"metadata":{},"sourceType":"module"}