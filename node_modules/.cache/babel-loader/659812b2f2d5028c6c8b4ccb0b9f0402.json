{"ast":null,"code":"var _jsxFileName = \"/Users/kerp/Documents/GitHub/landing-page/src/components/Web3ReactManager/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { network } from '../../connectors';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport { Spinner } from '../../theme';\nimport Circle from \"../../assets/images/circle.svg\";\nimport { NetworkContextName } from '../../constants';\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`;\nconst Message = styled.h2`\n  color: ${({\n  theme\n}) => theme.uniswapPink};\n`;\nconst SpinnerWrapper = styled(Spinner)`\n  font-size: 4rem;\n\n  svg {\n    path {\n      color: ${({\n  theme\n}) => theme.uniswapPink};\n    }\n  }\n`;\nexport default function Web3ReactManager({\n  children\n}) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    active\n  } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React(NetworkContextName); // try to eagerly connect to an injected provider, if it exists and has granted access already\n\n  const triedEager = useEagerConnect(); // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  // TODO think about not doing this at all\n\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]); // 'pause' the network connector if we're ever connected to an account and it's active\n\n  useEffect(() => {\n    if (active && networkActive) {\n      network.pause();\n    }\n  }, [active, networkActive]); // 'resume' the network connector if we're ever not connected to an account and it's active\n\n  useEffect(() => {\n    if (!active && networkActive) {\n      network.resume();\n    }\n  }, [active, networkActive]); // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n\n  useInactiveListener(!triedEager); // handle delayed loader state\n\n  const [showLoader, setShowLoader] = useState(false);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true);\n    }, 600);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []); // on page load, do nothing until we've tried to connect to the injected connector\n\n  if (!triedEager) {\n    return null;\n  } // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n\n\n  if (!active && networkError) {\n    return /*#__PURE__*/React.createElement(MessageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, t('unknownError')));\n  } // if neither context is active, spin\n\n\n  if (!active && !networkActive) {\n    return showLoader ? /*#__PURE__*/React.createElement(MessageWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(SpinnerWrapper, {\n      src: Circle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    })) : null;\n  }\n\n  return children;\n}","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/src/components/Web3ReactManager/index.js"],"names":["React","useState","useEffect","useWeb3React","styled","useTranslation","network","useEagerConnect","useInactiveListener","Spinner","NetworkContextName","MessageWrapper","div","Message","h2","theme","uniswapPink","SpinnerWrapper","Web3ReactManager","children","t","active","networkActive","error","networkError","activate","activateNetwork","triedEager","pause","resume","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","Circle"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useTranslation } from 'react-i18next'\n\nimport { network } from '../../connectors'\nimport { useEagerConnect, useInactiveListener } from '../../hooks'\nimport { Spinner } from '../../theme'\nimport Circle from '../../assets/images/circle.svg'\nimport { NetworkContextName } from '../../constants'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.uniswapPink};\n`\n\nconst SpinnerWrapper = styled(Spinner)`\n  font-size: 4rem;\n\n  svg {\n    path {\n      color: ${({ theme }) => theme.uniswapPink};\n    }\n  }\n`\n\nexport default function Web3ReactManager({ children }) {\n  const { t } = useTranslation()\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  // TODO think about not doing this at all\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // 'pause' the network connector if we're ever connected to an account and it's active\n  useEffect(() => {\n    if (active && networkActive) {\n      network.pause()\n    }\n  }, [active, networkActive])\n\n  // 'resume' the network connector if we're ever not connected to an account and it's active\n  useEffect(() => {\n    if (!active && networkActive) {\n      network.resume()\n    }\n  }, [active, networkActive])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager)\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true)\n    }, 600)\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [])\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>{t('unknownError')}</Message>\n      </MessageWrapper>\n    )\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? (\n      <MessageWrapper>\n        <SpinnerWrapper src={Circle} />\n      </MessageWrapper>\n    ) : null\n  }\n\n  return children\n}\n"]},"metadata":{},"sourceType":"module"}