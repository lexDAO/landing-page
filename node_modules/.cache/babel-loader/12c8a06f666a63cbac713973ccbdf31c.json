{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"@0x/utils\");\n/**\n * A altered version of the base class Subprovider found in [web3-provider-engine](https://github.com/MetaMask/provider-engine).\n * This one has an async/await `emitPayloadAsync` and also defined types.\n */\n\n\nvar Subprovider =\n/** @class */\nfunction () {\n  function Subprovider() {}\n\n  Subprovider._createFinalPayload = function (payload) {\n    var finalPayload = __assign({\n      // defaults\n      id: Subprovider._getRandomId(),\n      jsonrpc: '2.0',\n      params: []\n    }, payload);\n\n    return finalPayload;\n  }; // Ported from: https://github.com/MetaMask/provider-engine/blob/master/util/random-id.js\n\n\n  Subprovider._getRandomId = function () {\n    var extraDigits = 3;\n    var baseTen = 10; // 13 time digits\n\n    var datePart = new Date().getTime() * Math.pow(baseTen, extraDigits); // 3 random digits\n\n    var extraPart = Math.floor(Math.random() * Math.pow(baseTen, extraDigits)); // 16 digits\n\n    return datePart + extraPart;\n  };\n  /**\n   * Emits a JSON RPC payload that will then be handled by the ProviderEngine instance\n   * this subprovider is a part of. The payload will cascade down the subprovider middleware\n   * stack until finding the responsible entity for handling the request.\n   * @param payload JSON RPC payload\n   * @returns JSON RPC response payload\n   */\n\n\n  Subprovider.prototype.emitPayloadAsync = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var finalPayload, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            finalPayload = Subprovider._createFinalPayload(payload);\n            return [4\n            /*yield*/\n            , utils_1.promisify(this.engine.sendAsync, this.engine)(finalPayload)];\n\n          case 1:\n            response = _a.sent();\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\n   * Set's the subprovider's engine to the ProviderEngine it is added to.\n   * This is only called within the ProviderEngine source code, do not call\n   * directly.\n   * @param engine The ProviderEngine this subprovider is added to\n   */\n\n\n  Subprovider.prototype.setEngine = function (engine) {\n    this.engine = engine;\n  };\n\n  return Subprovider;\n}();\n\nexports.Subprovider = Subprovider;","map":{"version":3,"sources":["../../../src/subproviders/subprovider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAKA;;;;;;AAIA,IAAA,WAAA;AAAA;AAAA,YAAA;AAAA,WAAA,WAAA,GAAA,CA6DC;;AA1DoB,EAAA,WAAA,CAAA,mBAAA,GAAjB,UACI,OADJ,EACqD;AAEjD,QAAM,YAAY,GAAA,QAAA,CAAA;AACd;AACA,MAAA,EAAE,EAAE,WAAW,CAAC,YAAZ,EAFU;AAGd,MAAA,OAAO,EAAE,KAHK;AAId,MAAA,MAAM,EAAE;AAJM,KAAA,EAKX,OALW,CAAlB;;AAOA,WAAO,YAAP;AACH,GAXgB,CAHrB,CAeI;;;AACe,EAAA,WAAA,CAAA,YAAA,GAAf,YAAA;AACI,QAAM,WAAW,GAAG,CAApB;AACA,QAAM,OAAO,GAAG,EAAhB,CAFJ,CAGI;;AACA,QAAM,QAAQ,GAAG,IAAI,IAAJ,GAAW,OAAX,KAAuB,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,WAAlB,CAAxC,CAJJ,CAKI;;AACA,QAAM,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,WAAlB,CAA3B,CAAlB,CANJ,CAOI;;AACA,WAAO,QAAQ,GAAG,SAAlB;AACH,GATc;AAsBf;;;;;;;;;AAOa,EAAA,WAAA,CAAA,SAAA,CAAA,gBAAA,GAAb,UAA8B,OAA9B,EAA+E;;;;;;AACrE,YAAA,YAAY,GAAG,WAAW,CAAC,mBAAZ,CAAgC,OAAhC,CAAf;AAGW,mBAAA,CAAA;AAAA;AAAA,cAAM,OAAA,CAAA,SAAA,CAAkC,KAAK,MAAL,CAAY,SAA9C,EAAyD,KAAK,MAA9D,EAAsE,YAAtE,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AACN,mBAAA,CAAA;AAAA;AAAA,cAAO,QAAP,CAAA;;;;AACH,GANY;AAOb;;;;;;;;AAMO,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAA2C;AACvC,SAAK,MAAL,GAAc,MAAd;AACH,GAFM;;AAGX,SAAA,WAAA;AAAC,CA7DD,EAAA;;AAAsB,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"@0x/utils\");\n/**\n * A altered version of the base class Subprovider found in [web3-provider-engine](https://github.com/MetaMask/provider-engine).\n * This one has an async/await `emitPayloadAsync` and also defined types.\n */\nvar Subprovider = /** @class */ (function () {\n    function Subprovider() {\n    }\n    Subprovider._createFinalPayload = function (payload) {\n        var finalPayload = __assign({ \n            // defaults\n            id: Subprovider._getRandomId(), jsonrpc: '2.0', params: [] }, payload);\n        return finalPayload;\n    };\n    // Ported from: https://github.com/MetaMask/provider-engine/blob/master/util/random-id.js\n    Subprovider._getRandomId = function () {\n        var extraDigits = 3;\n        var baseTen = 10;\n        // 13 time digits\n        var datePart = new Date().getTime() * Math.pow(baseTen, extraDigits);\n        // 3 random digits\n        var extraPart = Math.floor(Math.random() * Math.pow(baseTen, extraDigits));\n        // 16 digits\n        return datePart + extraPart;\n    };\n    /**\n     * Emits a JSON RPC payload that will then be handled by the ProviderEngine instance\n     * this subprovider is a part of. The payload will cascade down the subprovider middleware\n     * stack until finding the responsible entity for handling the request.\n     * @param payload JSON RPC payload\n     * @returns JSON RPC response payload\n     */\n    Subprovider.prototype.emitPayloadAsync = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            var finalPayload, response;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        finalPayload = Subprovider._createFinalPayload(payload);\n                        return [4 /*yield*/, utils_1.promisify(this.engine.sendAsync, this.engine)(finalPayload)];\n                    case 1:\n                        response = _a.sent();\n                        return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    /**\n     * Set's the subprovider's engine to the ProviderEngine it is added to.\n     * This is only called within the ProviderEngine source code, do not call\n     * directly.\n     * @param engine The ProviderEngine this subprovider is added to\n     */\n    Subprovider.prototype.setEngine = function (engine) {\n        this.engine = engine;\n    };\n    return Subprovider;\n}());\nexports.Subprovider = Subprovider;\n//# sourceMappingURL=subprovider.js.map"]},"metadata":{},"sourceType":"script"}