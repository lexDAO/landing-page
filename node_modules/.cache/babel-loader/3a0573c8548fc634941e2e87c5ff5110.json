{"ast":null,"code":"var _jsxFileName = \"/Users/kerp/Documents/GitHub/landing-page/src/components/WalletModal/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactGA from 'react-ga';\nimport styled from 'styled-components';\nimport { isMobile } from 'react-device-detect';\nimport { useTranslation } from 'react-i18next';\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport { URI_AVAILABLE } from '@web3-react/walletconnect-connector';\nimport Modal from '../Modal';\nimport AccountDetails from '../AccountDetails';\nimport PendingView from './PendingView';\nimport Option from './Option';\nimport { SUPPORTED_WALLETS } from '../../constants';\nimport { usePrevious } from '../../hooks';\nimport { Link } from '../../theme';\nimport MetamaskIcon from '../../assets/images/metamask.png';\nimport { ReactComponent as Close } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/images/x.svg\";\nimport { injected, walletconnect, fortmatic, portis } from '../../connectors';\nimport { useWalletModalToggle, useWalletModalOpen } from '../../contexts/Application';\nimport { OVERLAY_READY } from '../../connectors/Fortmatic';\nconst CloseIcon = styled.div`\n  position: absolute;\n  right: 1rem;\n  top: 14px;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`;\nconst CloseColor = styled(Close)`\n  path {\n    stroke: ${({\n  theme\n}) => theme.chaliceGray};\n  }\n`;\nconst Wrapper = styled.div`\n  ${({\n  theme\n}) => theme.flexColumnNoWrap}\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  background-color: ${({\n  theme\n}) => theme.backgroundColor};\n`;\nconst HeaderRow = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  padding: 1.5rem 1.5rem;\n  font-weight: 500;\n  color: ${props => props.color === 'blue' ? ({\n  theme\n}) => theme.royalBlue : 'inherit'};\n  ${({\n  theme\n}) => theme.mediaWidth.upToMedium`\n    padding: 1rem;\n  `};\n`;\nconst ContentWrapper = styled.div`\n  background-color: ${({\n  theme\n}) => theme.backgroundColor};\n  padding: 2rem;\n  ${({\n  theme\n}) => theme.mediaWidth.upToMedium`padding: 1rem`};\n`;\nconst UpperSection = styled.div`\n  position: relative;\n  background-color: ${({\n  theme\n}) => theme.concreteGray};\n\n  h5 {\n    margin: 0;\n    margin-bottom: 0.5rem;\n    font-size: 1rem;\n    font-weight: 400;\n  }\n\n  h5:last-child {\n    margin-bottom: 0px;\n  }\n\n  h4 {\n    margin-top: 0;\n    font-weight: 500;\n  }\n`;\nconst Blurb = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap}\n  align-items: center;\n  justify-content: center;\n  margin-top: 2rem;\n  ${({\n  theme\n}) => theme.mediaWidth.upToMedium`\n    margin: 1rem;\n    font-size: 12px;\n  `};\n`;\nconst OptionGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 10px;\n  ${({\n  theme\n}) => theme.mediaWidth.upToMedium`\n    grid-template-columns: 1fr;\n    grid-gap: 10px;\n  `};\n`;\nconst HoverText = styled.div`\n  :hover {\n    cursor: pointer;\n  }\n`;\nconst WALLET_VIEWS = {\n  OPTIONS: 'options',\n  OPTIONS_SECONDARY: 'options_secondary',\n  ACCOUNT: 'account',\n  PENDING: 'pending'\n};\nexport default function WalletModal({\n  pendingTransactions,\n  confirmedTransactions,\n  ENSName\n}) {\n  const {\n    active,\n    account,\n    connector,\n    activate,\n    error\n  } = useWeb3React();\n  const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT);\n  const [pendingWallet, setPendingWallet] = useState();\n  const [pendingError, setPendingError] = useState();\n  const walletModalOpen = useWalletModalOpen();\n  const toggleWalletModal = useWalletModalToggle();\n  const {\n    t\n  } = useTranslation(); // always reset to account view\n\n  useEffect(() => {\n    if (walletModalOpen) {\n      setPendingError(false);\n      setWalletView(WALLET_VIEWS.ACCOUNT);\n    }\n  }, [walletModalOpen]); // set up uri listener for walletconnect\n\n  const [uri, setUri] = useState();\n  useEffect(() => {\n    const activateWC = uri => {\n      setUri(uri); // setWalletView(WALLET_VIEWS.PENDING)\n    };\n\n    walletconnect.on(URI_AVAILABLE, activateWC);\n    return () => {\n      walletconnect.off(URI_AVAILABLE, activateWC);\n    };\n  }, []); // close modal when a connection is successful\n\n  const activePrevious = usePrevious(active);\n  const connectorPrevious = usePrevious(connector);\n  useEffect(() => {\n    if (walletModalOpen && (active && !activePrevious || connector && connector !== connectorPrevious && !error)) {\n      setWalletView(WALLET_VIEWS.ACCOUNT);\n    }\n  }, [setWalletView, active, error, connector, walletModalOpen, activePrevious, connectorPrevious]);\n\n  const tryActivation = async connector => {\n    let name = '';\n    Object.keys(SUPPORTED_WALLETS).map(key => {\n      if (connector === SUPPORTED_WALLETS[key].connector) {\n        return name = SUPPORTED_WALLETS[key].name;\n      }\n\n      return true;\n    }); // log selected wallet\n\n    ReactGA.event({\n      category: 'Wallet',\n      action: 'Change Wallet',\n      label: name\n    });\n    setPendingWallet(connector); // set wallet for pending view\n\n    setWalletView(WALLET_VIEWS.PENDING);\n    activate(connector, undefined, true).catch(error => {\n      if (error instanceof UnsupportedChainIdError) {\n        activate(connector); // a little janky...can't use setError because the connector isn't set\n      } else {\n        setPendingError(true);\n      }\n    });\n  }; // close wallet modal if fortmatic modal is active\n\n\n  useEffect(() => {\n    fortmatic.on(OVERLAY_READY, () => {\n      toggleWalletModal();\n    });\n  }, [toggleWalletModal]); // get wallets user can switch too, depending on device/browser\n\n  function getOptions() {\n    const isMetamask = window.ethereum && window.ethereum.isMetaMask;\n    return Object.keys(SUPPORTED_WALLETS).map(key => {\n      const option = SUPPORTED_WALLETS[key]; // check for mobile options\n\n      if (isMobile) {\n        // disable portis on mobile for now\n        if (option.connector === portis) {\n          return null;\n        }\n\n        if (!window.web3 && !window.ethereum && option.mobile) {\n          return /*#__PURE__*/React.createElement(Option, {\n            onClick: () => {\n              option.connector !== connector && !option.href && tryActivation(option.connector);\n            },\n            key: key,\n            active: option.connector && option.connector === connector,\n            color: option.color,\n            link: option.href,\n            header: option.name,\n            subheader: null,\n            icon: require('../../assets/images/' + option.iconName),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 13\n            }\n          });\n        }\n\n        return null;\n      } // overwrite injected when needed\n\n\n      if (option.connector === injected) {\n        // don't show injected if there's no injected provider\n        if (!(window.web3 || window.ethereum)) {\n          if (option.name === 'MetaMask') {\n            return /*#__PURE__*/React.createElement(Option, {\n              key: key,\n              color: '#E8831D',\n              header: 'Install Metamask',\n              subheader: null,\n              link: 'https://metamask.io/',\n              icon: MetamaskIcon,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 15\n              }\n            });\n          } else {\n            return null; // dont want to return install twice\n          }\n        } // don't return metamask if injected provider isn't metamask\n        else if (option.name === 'MetaMask' && !isMetamask) {\n            return null;\n          } // likewise for generic\n          else if (option.name === 'Injected' && isMetamask) {\n              return null;\n            }\n      } // return rest of options\n\n\n      return !isMobile && !option.mobileOnly && /*#__PURE__*/React.createElement(Option, {\n        onClick: () => {\n          option.connector === connector ? setWalletView(WALLET_VIEWS.ACCOUNT) : !option.href && tryActivation(option.connector);\n        },\n        key: key,\n        active: option.connector === connector,\n        color: option.color,\n        link: option.href,\n        header: option.name,\n        subheader: null // use option.descriptio to bring back multi-line\n        ,\n        icon: require('../../assets/images/' + option.iconName),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }\n      });\n    });\n  }\n\n  function getModalContent() {\n    if (error) {\n      return /*#__PURE__*/React.createElement(UpperSection, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CloseIcon, {\n        onClick: toggleWalletModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(CloseColor, {\n        alt: 'close icon',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(HeaderRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }\n      }, error instanceof UnsupportedChainIdError ? 'Wrong Network' : 'Error connecting'), /*#__PURE__*/React.createElement(ContentWrapper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }\n      }, error instanceof UnsupportedChainIdError ? /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 15\n        }\n      }, \"Please connect to the main Ethereum network.\") : 'Error connecting. Try refreshing the page.'));\n    }\n\n    if (account && walletView === WALLET_VIEWS.ACCOUNT) {\n      return /*#__PURE__*/React.createElement(AccountDetails, {\n        toggleWalletModal: toggleWalletModal,\n        pendingTransactions: pendingTransactions,\n        confirmedTransactions: confirmedTransactions,\n        ENSName: ENSName,\n        openOptions: () => setWalletView(WALLET_VIEWS.OPTIONS),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(UpperSection, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      onClick: toggleWalletModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CloseColor, {\n      alt: 'close icon',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }\n    })), walletView !== WALLET_VIEWS.ACCOUNT ? /*#__PURE__*/React.createElement(HeaderRow, {\n      color: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(HoverText, {\n      onClick: () => {\n        setPendingError(false);\n        setWalletView(WALLET_VIEWS.ACCOUNT);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }\n    }, \"Back\")) : /*#__PURE__*/React.createElement(HeaderRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(HoverText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 13\n      }\n    }, t('connectToWallet'))), /*#__PURE__*/React.createElement(ContentWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }\n    }, walletView === WALLET_VIEWS.PENDING ? /*#__PURE__*/React.createElement(PendingView, {\n      uri: uri,\n      size: 220,\n      connector: pendingWallet,\n      error: pendingError,\n      setPendingError: setPendingError,\n      tryActivation: tryActivation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(OptionGrid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 13\n      }\n    }, getOptions()), walletView !== WALLET_VIEWS.PENDING && /*#__PURE__*/React.createElement(Blurb, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 15\n      }\n    }, \"New to Ethereum? \\xA0\"), ' ', /*#__PURE__*/React.createElement(Link, {\n      href: \"https://ethereum.org/use/#3-what-is-a-wallet-and-which-one-should-i-use\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 15\n      }\n    }, \"Learn more about wallets\"))));\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    style: {\n      userSelect: 'none'\n    },\n    isOpen: walletModalOpen,\n    onDismiss: toggleWalletModal,\n    minHeight: null,\n    maxHeight: 90,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }\n  }, getModalContent()));\n}","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/src/components/WalletModal/index.js"],"names":["React","useState","useEffect","ReactGA","styled","isMobile","useTranslation","useWeb3React","UnsupportedChainIdError","URI_AVAILABLE","Modal","AccountDetails","PendingView","Option","SUPPORTED_WALLETS","usePrevious","Link","MetamaskIcon","injected","walletconnect","fortmatic","portis","useWalletModalToggle","useWalletModalOpen","OVERLAY_READY","CloseIcon","div","CloseColor","Close","theme","chaliceGray","Wrapper","flexColumnNoWrap","backgroundColor","HeaderRow","flexRowNoWrap","props","color","royalBlue","mediaWidth","upToMedium","ContentWrapper","UpperSection","concreteGray","Blurb","OptionGrid","HoverText","WALLET_VIEWS","OPTIONS","OPTIONS_SECONDARY","ACCOUNT","PENDING","WalletModal","pendingTransactions","confirmedTransactions","ENSName","active","account","connector","activate","error","walletView","setWalletView","pendingWallet","setPendingWallet","pendingError","setPendingError","walletModalOpen","toggleWalletModal","t","uri","setUri","activateWC","on","off","activePrevious","connectorPrevious","tryActivation","name","Object","keys","map","key","event","category","action","label","undefined","catch","getOptions","isMetamask","window","ethereum","isMetaMask","option","web3","mobile","href","require","iconName","mobileOnly","getModalContent","userSelect"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReactGA from 'react-ga'\nimport styled from 'styled-components'\nimport { isMobile } from 'react-device-detect'\nimport { useTranslation } from 'react-i18next'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { URI_AVAILABLE } from '@web3-react/walletconnect-connector'\n\nimport Modal from '../Modal'\nimport AccountDetails from '../AccountDetails'\nimport PendingView from './PendingView'\nimport Option from './Option'\nimport { SUPPORTED_WALLETS } from '../../constants'\nimport { usePrevious } from '../../hooks'\nimport { Link } from '../../theme'\nimport MetamaskIcon from '../../assets/images/metamask.png'\nimport { ReactComponent as Close } from '../../assets/images/x.svg'\nimport { injected, walletconnect, fortmatic, portis } from '../../connectors'\nimport { useWalletModalToggle, useWalletModalOpen } from '../../contexts/Application'\nimport { OVERLAY_READY } from '../../connectors/Fortmatic'\n\nconst CloseIcon = styled.div`\n  position: absolute;\n  right: 1rem;\n  top: 14px;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`\n\nconst CloseColor = styled(Close)`\n  path {\n    stroke: ${({ theme }) => theme.chaliceGray};\n  }\n`\n\nconst Wrapper = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap}\n  margin: 0;\n  padding: 0;\n  width: 100%;\n  background-color: ${({ theme }) => theme.backgroundColor};\n`\n\nconst HeaderRow = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  padding: 1.5rem 1.5rem;\n  font-weight: 500;\n  color: ${props => (props.color === 'blue' ? ({ theme }) => theme.royalBlue : 'inherit')};\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    padding: 1rem;\n  `};\n`\n\nconst ContentWrapper = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  padding: 2rem;\n  ${({ theme }) => theme.mediaWidth.upToMedium`padding: 1rem`};\n`\n\nconst UpperSection = styled.div`\n  position: relative;\n  background-color: ${({ theme }) => theme.concreteGray};\n\n  h5 {\n    margin: 0;\n    margin-bottom: 0.5rem;\n    font-size: 1rem;\n    font-weight: 400;\n  }\n\n  h5:last-child {\n    margin-bottom: 0px;\n  }\n\n  h4 {\n    margin-top: 0;\n    font-weight: 500;\n  }\n`\n\nconst Blurb = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap}\n  align-items: center;\n  justify-content: center;\n  margin-top: 2rem;\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    margin: 1rem;\n    font-size: 12px;\n  `};\n`\n\nconst OptionGrid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 10px;\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    grid-template-columns: 1fr;\n    grid-gap: 10px;\n  `};\n`\n\nconst HoverText = styled.div`\n  :hover {\n    cursor: pointer;\n  }\n`\n\nconst WALLET_VIEWS = {\n  OPTIONS: 'options',\n  OPTIONS_SECONDARY: 'options_secondary',\n  ACCOUNT: 'account',\n  PENDING: 'pending'\n}\n\nexport default function WalletModal({ pendingTransactions, confirmedTransactions, ENSName }) {\n  const { active, account, connector, activate, error } = useWeb3React()\n\n  const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT)\n\n  const [pendingWallet, setPendingWallet] = useState()\n\n  const [pendingError, setPendingError] = useState()\n\n  const walletModalOpen = useWalletModalOpen()\n  const toggleWalletModal = useWalletModalToggle()\n\n  const { t } = useTranslation()\n\n  // always reset to account view\n  useEffect(() => {\n    if (walletModalOpen) {\n      setPendingError(false)\n      setWalletView(WALLET_VIEWS.ACCOUNT)\n    }\n  }, [walletModalOpen])\n\n  // set up uri listener for walletconnect\n  const [uri, setUri] = useState()\n  useEffect(() => {\n    const activateWC = uri => {\n      setUri(uri)\n      // setWalletView(WALLET_VIEWS.PENDING)\n    }\n    walletconnect.on(URI_AVAILABLE, activateWC)\n    return () => {\n      walletconnect.off(URI_AVAILABLE, activateWC)\n    }\n  }, [])\n\n  // close modal when a connection is successful\n  const activePrevious = usePrevious(active)\n  const connectorPrevious = usePrevious(connector)\n  useEffect(() => {\n    if (walletModalOpen && ((active && !activePrevious) || (connector && connector !== connectorPrevious && !error))) {\n      setWalletView(WALLET_VIEWS.ACCOUNT)\n    }\n  }, [setWalletView, active, error, connector, walletModalOpen, activePrevious, connectorPrevious])\n\n  const tryActivation = async connector => {\n    let name = ''\n    Object.keys(SUPPORTED_WALLETS).map(key => {\n      if (connector === SUPPORTED_WALLETS[key].connector) {\n        return (name = SUPPORTED_WALLETS[key].name)\n      }\n      return true\n    })\n    // log selected wallet\n    ReactGA.event({\n      category: 'Wallet',\n      action: 'Change Wallet',\n      label: name\n    })\n    setPendingWallet(connector) // set wallet for pending view\n    setWalletView(WALLET_VIEWS.PENDING)\n    activate(connector, undefined, true).catch(error => {\n      if (error instanceof UnsupportedChainIdError) {\n        activate(connector) // a little janky...can't use setError because the connector isn't set\n      } else {\n        setPendingError(true)\n      }\n    })\n  }\n\n  // close wallet modal if fortmatic modal is active\n  useEffect(() => {\n    fortmatic.on(OVERLAY_READY, () => {\n      toggleWalletModal()\n    })\n  }, [toggleWalletModal])\n\n  // get wallets user can switch too, depending on device/browser\n  function getOptions() {\n    const isMetamask = window.ethereum && window.ethereum.isMetaMask\n    return Object.keys(SUPPORTED_WALLETS).map(key => {\n      const option = SUPPORTED_WALLETS[key]\n      // check for mobile options\n      if (isMobile) {\n        // disable portis on mobile for now\n        if (option.connector === portis) {\n          return null\n        }\n\n        if (!window.web3 && !window.ethereum && option.mobile) {\n          return (\n            <Option\n              onClick={() => {\n                option.connector !== connector && !option.href && tryActivation(option.connector)\n              }}\n              key={key}\n              active={option.connector && option.connector === connector}\n              color={option.color}\n              link={option.href}\n              header={option.name}\n              subheader={null}\n              icon={require('../../assets/images/' + option.iconName)}\n            />\n          )\n        }\n        return null\n      }\n\n      // overwrite injected when needed\n      if (option.connector === injected) {\n        // don't show injected if there's no injected provider\n        if (!(window.web3 || window.ethereum)) {\n          if (option.name === 'MetaMask') {\n            return (\n              <Option\n                key={key}\n                color={'#E8831D'}\n                header={'Install Metamask'}\n                subheader={null}\n                link={'https://metamask.io/'}\n                icon={MetamaskIcon}\n              />\n            )\n          } else {\n            return null // dont want to return install twice\n          }\n        }\n        // don't return metamask if injected provider isn't metamask\n        else if (option.name === 'MetaMask' && !isMetamask) {\n          return null\n        }\n        // likewise for generic\n        else if (option.name === 'Injected' && isMetamask) {\n          return null\n        }\n      }\n\n      // return rest of options\n      return (\n        !isMobile &&\n        !option.mobileOnly && (\n          <Option\n            onClick={() => {\n              option.connector === connector\n                ? setWalletView(WALLET_VIEWS.ACCOUNT)\n                : !option.href && tryActivation(option.connector)\n            }}\n            key={key}\n            active={option.connector === connector}\n            color={option.color}\n            link={option.href}\n            header={option.name}\n            subheader={null} // use option.descriptio to bring back multi-line\n            icon={require('../../assets/images/' + option.iconName)}\n          />\n        )\n      )\n    })\n  }\n\n  function getModalContent() {\n    if (error) {\n      return (\n        <UpperSection>\n          <CloseIcon onClick={toggleWalletModal}>\n            <CloseColor alt={'close icon'} />\n          </CloseIcon>\n          <HeaderRow>{error instanceof UnsupportedChainIdError ? 'Wrong Network' : 'Error connecting'}</HeaderRow>\n          <ContentWrapper>\n            {error instanceof UnsupportedChainIdError ? (\n              <h5>Please connect to the main Ethereum network.</h5>\n            ) : (\n              'Error connecting. Try refreshing the page.'\n            )}\n          </ContentWrapper>\n        </UpperSection>\n      )\n    }\n    if (account && walletView === WALLET_VIEWS.ACCOUNT) {\n      return (\n        <AccountDetails\n          toggleWalletModal={toggleWalletModal}\n          pendingTransactions={pendingTransactions}\n          confirmedTransactions={confirmedTransactions}\n          ENSName={ENSName}\n          openOptions={() => setWalletView(WALLET_VIEWS.OPTIONS)}\n        />\n      )\n    }\n    return (\n      <UpperSection>\n        <CloseIcon onClick={toggleWalletModal}>\n          <CloseColor alt={'close icon'} />\n        </CloseIcon>\n        {walletView !== WALLET_VIEWS.ACCOUNT ? (\n          <HeaderRow color=\"blue\">\n            <HoverText\n              onClick={() => {\n                setPendingError(false)\n                setWalletView(WALLET_VIEWS.ACCOUNT)\n              }}\n            >\n              Back\n            </HoverText>\n          </HeaderRow>\n        ) : (\n          <HeaderRow>\n            <HoverText>{t('connectToWallet')}</HoverText>\n          </HeaderRow>\n        )}\n        <ContentWrapper>\n          {walletView === WALLET_VIEWS.PENDING ? (\n            <PendingView\n              uri={uri}\n              size={220}\n              connector={pendingWallet}\n              error={pendingError}\n              setPendingError={setPendingError}\n              tryActivation={tryActivation}\n            />\n          ) : (\n            <OptionGrid>{getOptions()}</OptionGrid>\n          )}\n          {walletView !== WALLET_VIEWS.PENDING && (\n            <Blurb>\n              <span>New to Ethereum? &nbsp;</span>{' '}\n              <Link href=\"https://ethereum.org/use/#3-what-is-a-wallet-and-which-one-should-i-use\">\n                Learn more about wallets\n              </Link>\n            </Blurb>\n          )}\n        </ContentWrapper>\n      </UpperSection>\n    )\n  }\n\n  return (\n    <Modal\n      style={{ userSelect: 'none' }}\n      isOpen={walletModalOpen}\n      onDismiss={toggleWalletModal}\n      minHeight={null}\n      maxHeight={90}\n    >\n      <Wrapper>{getModalContent()}</Wrapper>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}