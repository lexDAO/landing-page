{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar lodash_clonedeepwith_1 = __importDefault(require(\"lodash.clonedeepwith\"));\n\nvar types_1 = require(\"../types\");\n\nvar constants_1 = require(\"../constants\");\n\nvar _utils_1 = require(\"../_utils\");\n\nvar _utils_2 = require(\"./_utils\");\n\nvar market_1 = require(\"./market\");\n\nfunction getInputPrice(inputAmount, inputReserve, outputReserve) {\n  _utils_1.ensureAllUInt256([inputAmount, inputReserve, outputReserve]);\n\n  if (inputReserve.isLessThanOrEqualTo(constants_1._0) || outputReserve.isLessThanOrEqualTo(constants_1._0)) {\n    throw Error(\"Both inputReserve '\" + inputReserve + \"' and outputReserve '\" + outputReserve + \"' must be non-zero.\");\n  }\n\n  var inputAmountWithFee = inputAmount.multipliedBy(constants_1._997);\n  var numerator = inputAmountWithFee.multipliedBy(outputReserve);\n  var denominator = inputReserve.multipliedBy(constants_1._1000).plus(inputAmountWithFee);\n  var outputAmount = numerator.dividedToIntegerBy(denominator);\n\n  _utils_1.ensureAllUInt256([inputAmountWithFee, numerator, denominator, outputAmount]);\n\n  return outputAmount;\n}\n\nfunction getOutputPrice(outputAmount, inputReserve, outputReserve) {\n  _utils_1.ensureAllUInt256([outputAmount, inputReserve, outputReserve]);\n\n  if (inputReserve.isLessThanOrEqualTo(constants_1._0) || outputReserve.isLessThanOrEqualTo(constants_1._0)) {\n    throw Error(\"Both inputReserve '\" + inputReserve + \"' and outputReserve '\" + outputReserve + \"' must be non-zero.\");\n  }\n\n  var numerator = inputReserve.multipliedBy(outputAmount).multipliedBy(constants_1._1000);\n  var denominator = outputReserve.minus(outputAmount).multipliedBy(constants_1._997);\n  var inputAmount = numerator.dividedToIntegerBy(denominator).plus(constants_1._1);\n\n  _utils_1.ensureAllUInt256([numerator, denominator, inputAmount]);\n\n  return inputAmount;\n}\n\nfunction getSingleTradeTransput(tradeType, tradeExact, tradeAmount, reserves) {\n  if (!types_1.areTokenReservesNormalized(reserves)) {\n    throw Error;\n  }\n\n  var inputReserve = tradeType === constants_1.TRADE_TYPE.ETH_TO_TOKEN ? reserves.ethReserve.amount : reserves.tokenReserve.amount;\n  var outputReserve = tradeType === constants_1.TRADE_TYPE.ETH_TO_TOKEN ? reserves.tokenReserve.amount : reserves.ethReserve.amount;\n  var calculatedAmount = tradeExact === constants_1.TRADE_EXACT.INPUT ? getInputPrice(tradeAmount, inputReserve, outputReserve) : getOutputPrice(tradeAmount, inputReserve, outputReserve);\n  return calculatedAmount;\n}\n\nfunction customizer(value) {\n  if (bignumber_js_1.default.isBigNumber(value)) {\n    return new bignumber_js_1.default(value);\n  }\n}\n\nfunction getTradeTransput(tradeType, tradeExact, tradeAmount, inputReserves, outputReserves) {\n  var inputReservesPost = lodash_clonedeepwith_1.default(inputReserves, customizer);\n  var outputReservesPost = lodash_clonedeepwith_1.default(outputReserves, customizer);\n\n  if (tradeType === constants_1.TRADE_TYPE.TOKEN_TO_TOKEN) {\n    if (!types_1.areTokenReservesNormalized(inputReservesPost) || !types_1.areTokenReservesNormalized(outputReservesPost)) {\n      throw Error;\n    }\n\n    if (tradeExact === constants_1.TRADE_EXACT.INPUT) {\n      var intermediateTransput = getSingleTradeTransput(constants_1.TRADE_TYPE.TOKEN_TO_ETH, constants_1.TRADE_EXACT.INPUT, tradeAmount, inputReserves);\n      var finalTransput = getSingleTradeTransput(constants_1.TRADE_TYPE.ETH_TO_TOKEN, constants_1.TRADE_EXACT.INPUT, intermediateTransput, outputReserves);\n      inputReservesPost.ethReserve.amount = inputReservesPost.ethReserve.amount.minus(intermediateTransput);\n      inputReservesPost.tokenReserve.amount = inputReservesPost.tokenReserve.amount.plus(tradeAmount);\n      outputReservesPost.ethReserve.amount = outputReservesPost.ethReserve.amount.plus(intermediateTransput);\n      outputReservesPost.tokenReserve.amount = outputReservesPost.tokenReserve.amount.minus(finalTransput);\n      return {\n        transput: finalTransput,\n        inputReservesPost: inputReservesPost,\n        outputReservesPost: outputReservesPost\n      };\n    } else {\n      var intermediateTransput = getSingleTradeTransput(constants_1.TRADE_TYPE.ETH_TO_TOKEN, constants_1.TRADE_EXACT.OUTPUT, tradeAmount, outputReserves);\n      var finalTransput = getSingleTradeTransput(constants_1.TRADE_TYPE.TOKEN_TO_ETH, constants_1.TRADE_EXACT.OUTPUT, intermediateTransput, inputReserves);\n      inputReservesPost.ethReserve.amount = inputReservesPost.ethReserve.amount.minus(intermediateTransput);\n      inputReservesPost.tokenReserve.amount = inputReservesPost.tokenReserve.amount.plus(finalTransput);\n      outputReservesPost.ethReserve.amount = outputReservesPost.ethReserve.amount.plus(intermediateTransput);\n      outputReservesPost.tokenReserve.amount = outputReservesPost.tokenReserve.amount.minus(tradeAmount);\n      return {\n        transput: finalTransput,\n        inputReservesPost: inputReservesPost,\n        outputReservesPost: outputReservesPost\n      };\n    }\n  } else {\n    var reserves = tradeType === constants_1.TRADE_TYPE.ETH_TO_TOKEN ? outputReserves : inputReserves;\n    var finalTransput = getSingleTradeTransput(tradeType, tradeExact, tradeAmount, reserves);\n\n    if (tradeType === constants_1.TRADE_TYPE.ETH_TO_TOKEN) {\n      if (!types_1.areTokenReservesNormalized(outputReservesPost)) {\n        throw Error;\n      }\n\n      outputReservesPost.ethReserve.amount = outputReservesPost.ethReserve.amount.plus(tradeExact === constants_1.TRADE_EXACT.INPUT ? tradeAmount : finalTransput);\n      outputReservesPost.tokenReserve.amount = outputReservesPost.tokenReserve.amount.minus(tradeExact === constants_1.TRADE_EXACT.INPUT ? finalTransput : tradeAmount);\n    } else {\n      if (!types_1.areTokenReservesNormalized(inputReservesPost)) {\n        throw Error;\n      }\n\n      inputReservesPost.ethReserve.amount = inputReservesPost.ethReserve.amount.minus(tradeExact === constants_1.TRADE_EXACT.INPUT ? finalTransput : tradeAmount);\n      inputReservesPost.tokenReserve.amount = inputReservesPost.tokenReserve.amount.plus(tradeExact === constants_1.TRADE_EXACT.INPUT ? tradeAmount : finalTransput);\n    }\n\n    return {\n      transput: finalTransput,\n      inputReservesPost: inputReservesPost,\n      outputReservesPost: outputReservesPost\n    };\n  }\n}\n\nfunction calculateSlippage(baseRate, newRate) {\n  var difference = baseRate.minus(newRate).absoluteValue();\n  return difference.multipliedBy(constants_1._10000).dividedBy(baseRate);\n}\n\nfunction getTradeDetails(tradeExact, _tradeAmount, marketDetails) {\n  var tradeAmount = _utils_1.normalizeBigNumberish(_tradeAmount);\n\n  var _a = getTradeTransput(marketDetails.tradeType, tradeExact, tradeAmount, marketDetails.inputReserves, marketDetails.outputReserves),\n      transput = _a.transput,\n      inputReservesPost = _a.inputReservesPost,\n      outputReservesPost = _a.outputReservesPost;\n\n  var inputAmount = {\n    token: marketDetails.inputReserves.token,\n    amount: tradeExact === constants_1.TRADE_EXACT.INPUT ? tradeAmount : transput\n  };\n  var outputAmount = {\n    token: marketDetails.outputReserves.token,\n    amount: tradeExact === constants_1.TRADE_EXACT.INPUT ? transput : tradeAmount\n  };\n  var marketDetailsPost = market_1.getMarketDetails(inputReservesPost, outputReservesPost);\n\n  var executionRate = _utils_2.calculateDecimalRate(outputAmount, inputAmount);\n\n  var marketRateSlippage = calculateSlippage(marketDetails.marketRate.rate, marketDetailsPost.marketRate.rate);\n  var executionRateSlippage = calculateSlippage(marketDetails.marketRate.rate, executionRate.rate);\n  return {\n    marketDetailsPre: marketDetails,\n    marketDetailsPost: marketDetailsPost,\n    tradeType: marketDetails.tradeType,\n    tradeExact: tradeExact,\n    inputAmount: inputAmount,\n    outputAmount: outputAmount,\n    executionRate: executionRate,\n    marketRateSlippage: marketRateSlippage,\n    executionRateSlippage: executionRateSlippage\n  };\n}\n\nexports.getTradeDetails = getTradeDetails;","map":{"version":3,"sources":["../../src/computation/trade.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar lodash_clonedeepwith_1 = __importDefault(require(\"lodash.clonedeepwith\"));\nvar types_1 = require(\"../types\");\nvar constants_1 = require(\"../constants\");\nvar _utils_1 = require(\"../_utils\");\nvar _utils_2 = require(\"./_utils\");\nvar market_1 = require(\"./market\");\nfunction getInputPrice(inputAmount, inputReserve, outputReserve) {\n    _utils_1.ensureAllUInt256([inputAmount, inputReserve, outputReserve]);\n    if (inputReserve.isLessThanOrEqualTo(constants_1._0) || outputReserve.isLessThanOrEqualTo(constants_1._0)) {\n        throw Error(\"Both inputReserve '\" + inputReserve + \"' and outputReserve '\" + outputReserve + \"' must be non-zero.\");\n    }\n    var inputAmountWithFee = inputAmount.multipliedBy(constants_1._997);\n    var numerator = inputAmountWithFee.multipliedBy(outputReserve);\n    var denominator = inputReserve.multipliedBy(constants_1._1000).plus(inputAmountWithFee);\n    var outputAmount = numerator.dividedToIntegerBy(denominator);\n    _utils_1.ensureAllUInt256([inputAmountWithFee, numerator, denominator, outputAmount]);\n    return outputAmount;\n}\nfunction getOutputPrice(outputAmount, inputReserve, outputReserve) {\n    _utils_1.ensureAllUInt256([outputAmount, inputReserve, outputReserve]);\n    if (inputReserve.isLessThanOrEqualTo(constants_1._0) || outputReserve.isLessThanOrEqualTo(constants_1._0)) {\n        throw Error(\"Both inputReserve '\" + inputReserve + \"' and outputReserve '\" + outputReserve + \"' must be non-zero.\");\n    }\n    var numerator = inputReserve.multipliedBy(outputAmount).multipliedBy(constants_1._1000);\n    var denominator = outputReserve.minus(outputAmount).multipliedBy(constants_1._997);\n    var inputAmount = numerator.dividedToIntegerBy(denominator).plus(constants_1._1);\n    _utils_1.ensureAllUInt256([numerator, denominator, inputAmount]);\n    return inputAmount;\n}\nfunction getSingleTradeTransput(tradeType, tradeExact, tradeAmount, reserves) {\n    if (!types_1.areTokenReservesNormalized(reserves)) {\n        throw Error;\n    }\n    var inputReserve = tradeType === constants_1.TRADE_TYPE.ETH_TO_TOKEN ? reserves.ethReserve.amount : reserves.tokenReserve.amount;\n    var outputReserve = tradeType === constants_1.TRADE_TYPE.ETH_TO_TOKEN ? reserves.tokenReserve.amount : reserves.ethReserve.amount;\n    var calculatedAmount = tradeExact === constants_1.TRADE_EXACT.INPUT\n        ? getInputPrice(tradeAmount, inputReserve, outputReserve)\n        : getOutputPrice(tradeAmount, inputReserve, outputReserve);\n    return calculatedAmount;\n}\nfunction customizer(value) {\n    if (bignumber_js_1.default.isBigNumber(value)) {\n        return new bignumber_js_1.default(value);\n    }\n}\nfunction getTradeTransput(tradeType, tradeExact, tradeAmount, inputReserves, outputReserves) {\n    var inputReservesPost = lodash_clonedeepwith_1.default(inputReserves, customizer);\n    var outputReservesPost = lodash_clonedeepwith_1.default(outputReserves, customizer);\n    if (tradeType === constants_1.TRADE_TYPE.TOKEN_TO_TOKEN) {\n        if (!types_1.areTokenReservesNormalized(inputReservesPost) || !types_1.areTokenReservesNormalized(outputReservesPost)) {\n            throw Error;\n        }\n        if (tradeExact === constants_1.TRADE_EXACT.INPUT) {\n            var intermediateTransput = getSingleTradeTransput(constants_1.TRADE_TYPE.TOKEN_TO_ETH, constants_1.TRADE_EXACT.INPUT, tradeAmount, inputReserves);\n            var finalTransput = getSingleTradeTransput(constants_1.TRADE_TYPE.ETH_TO_TOKEN, constants_1.TRADE_EXACT.INPUT, intermediateTransput, outputReserves);\n            inputReservesPost.ethReserve.amount = inputReservesPost.ethReserve.amount.minus(intermediateTransput);\n            inputReservesPost.tokenReserve.amount = inputReservesPost.tokenReserve.amount.plus(tradeAmount);\n            outputReservesPost.ethReserve.amount = outputReservesPost.ethReserve.amount.plus(intermediateTransput);\n            outputReservesPost.tokenReserve.amount = outputReservesPost.tokenReserve.amount.minus(finalTransput);\n            return {\n                transput: finalTransput,\n                inputReservesPost: inputReservesPost,\n                outputReservesPost: outputReservesPost\n            };\n        }\n        else {\n            var intermediateTransput = getSingleTradeTransput(constants_1.TRADE_TYPE.ETH_TO_TOKEN, constants_1.TRADE_EXACT.OUTPUT, tradeAmount, outputReserves);\n            var finalTransput = getSingleTradeTransput(constants_1.TRADE_TYPE.TOKEN_TO_ETH, constants_1.TRADE_EXACT.OUTPUT, intermediateTransput, inputReserves);\n            inputReservesPost.ethReserve.amount = inputReservesPost.ethReserve.amount.minus(intermediateTransput);\n            inputReservesPost.tokenReserve.amount = inputReservesPost.tokenReserve.amount.plus(finalTransput);\n            outputReservesPost.ethReserve.amount = outputReservesPost.ethReserve.amount.plus(intermediateTransput);\n            outputReservesPost.tokenReserve.amount = outputReservesPost.tokenReserve.amount.minus(tradeAmount);\n            return {\n                transput: finalTransput,\n                inputReservesPost: inputReservesPost,\n                outputReservesPost: outputReservesPost\n            };\n        }\n    }\n    else {\n        var reserves = tradeType === constants_1.TRADE_TYPE.ETH_TO_TOKEN ? outputReserves : inputReserves;\n        var finalTransput = getSingleTradeTransput(tradeType, tradeExact, tradeAmount, reserves);\n        if (tradeType === constants_1.TRADE_TYPE.ETH_TO_TOKEN) {\n            if (!types_1.areTokenReservesNormalized(outputReservesPost)) {\n                throw Error;\n            }\n            outputReservesPost.ethReserve.amount = outputReservesPost.ethReserve.amount.plus(tradeExact === constants_1.TRADE_EXACT.INPUT ? tradeAmount : finalTransput);\n            outputReservesPost.tokenReserve.amount = outputReservesPost.tokenReserve.amount.minus(tradeExact === constants_1.TRADE_EXACT.INPUT ? finalTransput : tradeAmount);\n        }\n        else {\n            if (!types_1.areTokenReservesNormalized(inputReservesPost)) {\n                throw Error;\n            }\n            inputReservesPost.ethReserve.amount = inputReservesPost.ethReserve.amount.minus(tradeExact === constants_1.TRADE_EXACT.INPUT ? finalTransput : tradeAmount);\n            inputReservesPost.tokenReserve.amount = inputReservesPost.tokenReserve.amount.plus(tradeExact === constants_1.TRADE_EXACT.INPUT ? tradeAmount : finalTransput);\n        }\n        return {\n            transput: finalTransput,\n            inputReservesPost: inputReservesPost,\n            outputReservesPost: outputReservesPost\n        };\n    }\n}\nfunction calculateSlippage(baseRate, newRate) {\n    var difference = baseRate.minus(newRate).absoluteValue();\n    return difference.multipliedBy(constants_1._10000).dividedBy(baseRate);\n}\nfunction getTradeDetails(tradeExact, _tradeAmount, marketDetails) {\n    var tradeAmount = _utils_1.normalizeBigNumberish(_tradeAmount);\n    var _a = getTradeTransput(marketDetails.tradeType, tradeExact, tradeAmount, marketDetails.inputReserves, marketDetails.outputReserves), transput = _a.transput, inputReservesPost = _a.inputReservesPost, outputReservesPost = _a.outputReservesPost;\n    var inputAmount = {\n        token: marketDetails.inputReserves.token,\n        amount: tradeExact === constants_1.TRADE_EXACT.INPUT ? tradeAmount : transput\n    };\n    var outputAmount = {\n        token: marketDetails.outputReserves.token,\n        amount: tradeExact === constants_1.TRADE_EXACT.INPUT ? transput : tradeAmount\n    };\n    var marketDetailsPost = market_1.getMarketDetails(inputReservesPost, outputReservesPost);\n    var executionRate = _utils_2.calculateDecimalRate(outputAmount, inputAmount);\n    var marketRateSlippage = calculateSlippage(marketDetails.marketRate.rate, marketDetailsPost.marketRate.rate);\n    var executionRateSlippage = calculateSlippage(marketDetails.marketRate.rate, executionRate.rate);\n    return {\n        marketDetailsPre: marketDetails,\n        marketDetailsPost: marketDetailsPost,\n        tradeType: marketDetails.tradeType,\n        tradeExact: tradeExact,\n        inputAmount: inputAmount,\n        outputAmount: outputAmount,\n        executionRate: executionRate,\n        marketRateSlippage: marketRateSlippage,\n        executionRateSlippage: executionRateSlippage\n    };\n}\nexports.getTradeDetails = getTradeDetails;\n//# sourceMappingURL=trade.js.map"]},"metadata":{},"sourceType":"script"}