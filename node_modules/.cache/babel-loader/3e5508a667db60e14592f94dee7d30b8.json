{"ast":null,"code":"import _defineProperty from\"/Users/kerp/Documents/GitHub/landing-page/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{InjectedConnector}from'@web3-react/injected-connector';import{WalletConnectConnector}from'@web3-react/walletconnect-connector';import{WalletLinkConnector}from'@web3-react/walletlink-connector';import{PortisConnector}from'@web3-react/portis-connector';import{TorusConnector}from'@web3-react/torus-connector';import{NetworkConnector}from'./Network';import{FortmaticConnector}from'./Fortmatic';var POLLING_INTERVAL=10000;var NETWORK_URL=process.env.REACT_APP_IS_PRODUCTION_DEPLOY==='true'?process.env.REACT_APP_NETWORK_URL_PROD:process.env.REACT_APP_NETWORK_URL;export var network=new NetworkConnector({urls:_defineProperty({},Number(process.env.REACT_APP_CHAIN_ID),NETWORK_URL),pollingInterval:POLLING_INTERVAL*3});export var injected=new InjectedConnector({supportedChainIds:[Number(process.env.REACT_APP_CHAIN_ID)]});// mainnet only\nexport var walletconnect=new WalletConnectConnector({rpc:{1:NETWORK_URL},bridge:'https://bridge.walletconnect.org',qrcode:false,pollingInterval:POLLING_INTERVAL});// mainnet only\nexport var fortmatic=new FortmaticConnector({apiKey:process.env.REACT_APP_FORTMATIC_KEY,chainId:1});// mainnet only\nexport var portis=new PortisConnector({dAppId:process.env.REACT_APP_PORTIS_ID,networks:[1]});export var torus=new TorusConnector({chainId:1,initOptions:{showTorusButton:false}});// mainnet only\nexport var walletlink=new WalletLinkConnector({url:NETWORK_URL,appName:'Uniswap',appLogoUrl:'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg'});","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/src/connectors/index.js"],"names":["InjectedConnector","WalletConnectConnector","WalletLinkConnector","PortisConnector","TorusConnector","NetworkConnector","FortmaticConnector","POLLING_INTERVAL","NETWORK_URL","process","env","REACT_APP_IS_PRODUCTION_DEPLOY","REACT_APP_NETWORK_URL_PROD","REACT_APP_NETWORK_URL","network","urls","Number","REACT_APP_CHAIN_ID","pollingInterval","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","fortmatic","apiKey","REACT_APP_FORTMATIC_KEY","chainId","portis","dAppId","REACT_APP_PORTIS_ID","networks","torus","initOptions","showTorusButton","walletlink","url","appName","appLogoUrl"],"mappings":"kKAAA,OAASA,iBAAT,KAAkC,gCAAlC,CACA,OAASC,sBAAT,KAAuC,qCAAvC,CACA,OAASC,mBAAT,KAAoC,kCAApC,CACA,OAASC,eAAT,KAAgC,8BAAhC,CACA,OAASC,cAAT,KAA+B,6BAA/B,CAEA,OAASC,gBAAT,KAAiC,WAAjC,CACA,OAASC,kBAAT,KAAmC,aAAnC,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,KAAzB,CACA,GAAMC,CAAAA,WAAW,CACfC,OAAO,CAACC,GAAR,CAAYC,8BAAZ,GAA+C,MAA/C,CACIF,OAAO,CAACC,GAAR,CAAYE,0BADhB,CAEIH,OAAO,CAACC,GAAR,CAAYG,qBAHlB,CAKA,MAAO,IAAMC,CAAAA,OAAO,CAAG,GAAIT,CAAAA,gBAAJ,CAAqB,CAC1CU,IAAI,oBAAKC,MAAM,CAACP,OAAO,CAACC,GAAR,CAAYO,kBAAb,CAAX,CAA8CT,WAA9C,CADsC,CAE1CU,eAAe,CAAEX,gBAAgB,CAAG,CAFM,CAArB,CAAhB,CAKP,MAAO,IAAMY,CAAAA,QAAQ,CAAG,GAAInB,CAAAA,iBAAJ,CAAsB,CAC5CoB,iBAAiB,CAAE,CAACJ,MAAM,CAACP,OAAO,CAACC,GAAR,CAAYO,kBAAb,CAAP,CADyB,CAAtB,CAAjB,CAIP;AACA,MAAO,IAAMI,CAAAA,aAAa,CAAG,GAAIpB,CAAAA,sBAAJ,CAA2B,CACtDqB,GAAG,CAAE,CAAE,EAAGd,WAAL,CADiD,CAEtDe,MAAM,CAAE,kCAF8C,CAGtDC,MAAM,CAAE,KAH8C,CAItDN,eAAe,CAAEX,gBAJqC,CAA3B,CAAtB,CAOP;AACA,MAAO,IAAMkB,CAAAA,SAAS,CAAG,GAAInB,CAAAA,kBAAJ,CAAuB,CAC9CoB,MAAM,CAAEjB,OAAO,CAACC,GAAR,CAAYiB,uBAD0B,CAE9CC,OAAO,CAAE,CAFqC,CAAvB,CAAlB,CAKP;AACA,MAAO,IAAMC,CAAAA,MAAM,CAAG,GAAI1B,CAAAA,eAAJ,CAAoB,CACxC2B,MAAM,CAAErB,OAAO,CAACC,GAAR,CAAYqB,mBADoB,CAExCC,QAAQ,CAAE,CAAC,CAAD,CAF8B,CAApB,CAAf,CAKP,MAAO,IAAMC,CAAAA,KAAK,CAAG,GAAI7B,CAAAA,cAAJ,CAAmB,CACtCwB,OAAO,CAAE,CAD6B,CAEtCM,WAAW,CAAE,CACXC,eAAe,CAAE,KADN,CAFyB,CAAnB,CAAd,CAOP;AACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,GAAIlC,CAAAA,mBAAJ,CAAwB,CAChDmC,GAAG,CAAE7B,WAD2C,CAEhD8B,OAAO,CAAE,SAFuC,CAGhDC,UAAU,CACR,yKAJ8C,CAAxB,CAAnB","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { PortisConnector } from '@web3-react/portis-connector'\nimport { TorusConnector } from '@web3-react/torus-connector'\n\nimport { NetworkConnector } from './Network'\nimport { FortmaticConnector } from './Fortmatic'\n\nconst POLLING_INTERVAL = 10000\nconst NETWORK_URL =\n  process.env.REACT_APP_IS_PRODUCTION_DEPLOY === 'true'\n    ? process.env.REACT_APP_NETWORK_URL_PROD\n    : process.env.REACT_APP_NETWORK_URL\n\nexport const network = new NetworkConnector({\n  urls: { [Number(process.env.REACT_APP_CHAIN_ID)]: NETWORK_URL },\n  pollingInterval: POLLING_INTERVAL * 3\n})\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [Number(process.env.REACT_APP_CHAIN_ID)]\n})\n\n// mainnet only\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: NETWORK_URL },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: false,\n  pollingInterval: POLLING_INTERVAL\n})\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: process.env.REACT_APP_FORTMATIC_KEY,\n  chainId: 1\n})\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: process.env.REACT_APP_PORTIS_ID,\n  networks: [1]\n})\n\nexport const torus = new TorusConnector({\n  chainId: 1,\n  initOptions: {\n    showTorusButton: false\n  }\n})\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl:\n    'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg'\n})\n"]},"metadata":{},"sourceType":"module"}