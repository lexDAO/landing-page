{"ast":null,"code":"var _jsxFileName = \"/Users/kerp/Documents/GitHub/landing-page/src/contexts/LocalStorage.js\";\nimport React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect } from 'react';\nconst UNISWAP = 'UNISWAP';\nconst VERSION = 'VERSION';\nconst CURRENT_VERSION = 0;\nconst LAST_SAVED = 'LAST_SAVED';\nconst BETA_MESSAGE_DISMISSED = 'BETA_MESSAGE_DISMISSED';\nconst GENERAL_DAI__MESSAGE_DISMISSED = 'GENERAL_DAI__MESSAGE_DISMISSED';\nconst SAI_HOLDER__MESSAGE_DISMISSED = 'SAI_HOLDER__MESSAGE_DISMISSED';\nconst DARK_MODE = 'DARK_MODE';\nconst UPDATABLE_KEYS = [GENERAL_DAI__MESSAGE_DISMISSED, SAI_HOLDER__MESSAGE_DISMISSED, BETA_MESSAGE_DISMISSED, DARK_MODE];\nconst UPDATE_KEY = 'UPDATE_KEY';\nconst LocalStorageContext = createContext();\n\nfunction useLocalStorageContext() {\n  return useContext(LocalStorageContext);\n}\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case UPDATE_KEY:\n      {\n        const {\n          key,\n          value\n        } = payload;\n\n        if (!UPDATABLE_KEYS.some(k => k === key)) {\n          throw Error(`Unexpected key in LocalStorageContext reducer: '${key}'.`);\n        } else {\n          return { ...state,\n            [key]: value\n          };\n        }\n      }\n\n    default:\n      {\n        throw Error(`Unexpected action type in LocalStorageContext reducer: '${type}'.`);\n      }\n  }\n}\n\nfunction init() {\n  const defaultLocalStorage = {\n    [VERSION]: CURRENT_VERSION,\n    [BETA_MESSAGE_DISMISSED]: false,\n    [GENERAL_DAI__MESSAGE_DISMISSED]: false,\n    [SAI_HOLDER__MESSAGE_DISMISSED]: false,\n    [DARK_MODE]: true\n  };\n\n  try {\n    const parsed = JSON.parse(window.localStorage.getItem(UNISWAP));\n\n    if (parsed[VERSION] !== CURRENT_VERSION) {\n      // this is where we could run migration logic\n      return defaultLocalStorage;\n    } else {\n      return { ...defaultLocalStorage,\n        ...parsed\n      };\n    }\n  } catch {\n    return defaultLocalStorage;\n  }\n}\n\nexport default function Provider({\n  children\n}) {\n  const [state, dispatch] = useReducer(reducer, undefined, init);\n  const updateKey = useCallback((key, value) => {\n    dispatch({\n      type: UPDATE_KEY,\n      payload: {\n        key,\n        value\n      }\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(LocalStorageContext.Provider, {\n    value: useMemo(() => [state, {\n      updateKey\n    }], [state, updateKey]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function Updater() {\n  const [state] = useLocalStorageContext();\n  useEffect(() => {\n    window.localStorage.setItem(UNISWAP, JSON.stringify({ ...state,\n      [LAST_SAVED]: Math.floor(Date.now() / 1000)\n    }));\n  });\n  return null;\n}\nexport function useSaiHolderMessageManager() {\n  const [state, {\n    updateKey\n  }] = useLocalStorageContext();\n  const dismissSaiHolderMessage = useCallback(() => {\n    updateKey(SAI_HOLDER__MESSAGE_DISMISSED, true);\n  }, [updateKey]);\n  return [!state[SAI_HOLDER__MESSAGE_DISMISSED], dismissSaiHolderMessage];\n}\nexport function useGeneralDaiMessageManager() {\n  const [state, {\n    updateKey\n  }] = useLocalStorageContext();\n  const dismissGeneralDaiMessage = useCallback(() => {\n    updateKey(GENERAL_DAI__MESSAGE_DISMISSED, true);\n  }, [updateKey]);\n  return [!state[GENERAL_DAI__MESSAGE_DISMISSED], dismissGeneralDaiMessage];\n}\nexport function useBetaMessageManager() {\n  const [state, {\n    updateKey\n  }] = useLocalStorageContext();\n  const dismissBetaMessage = useCallback(() => {\n    updateKey(BETA_MESSAGE_DISMISSED, true);\n  }, [updateKey]);\n  return [!state[BETA_MESSAGE_DISMISSED], dismissBetaMessage];\n}\nexport function useDarkModeManager() {\n  const [state, {\n    updateKey\n  }] = useLocalStorageContext();\n  let isDarkMode = state[DARK_MODE];\n  const toggleDarkMode = useCallback(value => {\n    updateKey(DARK_MODE, value === false || value === true ? value : !isDarkMode);\n  }, [updateKey, isDarkMode]);\n  return [state[DARK_MODE], toggleDarkMode];\n}","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/src/contexts/LocalStorage.js"],"names":["React","createContext","useContext","useReducer","useMemo","useCallback","useEffect","UNISWAP","VERSION","CURRENT_VERSION","LAST_SAVED","BETA_MESSAGE_DISMISSED","GENERAL_DAI__MESSAGE_DISMISSED","SAI_HOLDER__MESSAGE_DISMISSED","DARK_MODE","UPDATABLE_KEYS","UPDATE_KEY","LocalStorageContext","useLocalStorageContext","reducer","state","type","payload","key","value","some","k","Error","init","defaultLocalStorage","parsed","JSON","parse","window","localStorage","getItem","Provider","children","dispatch","undefined","updateKey","Updater","setItem","stringify","Math","floor","Date","now","useSaiHolderMessageManager","dismissSaiHolderMessage","useGeneralDaiMessageManager","dismissGeneralDaiMessage","useBetaMessageManager","dismissBetaMessage","useDarkModeManager","isDarkMode","toggleDarkMode"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect } from 'react'\n\nconst UNISWAP = 'UNISWAP'\n\nconst VERSION = 'VERSION'\nconst CURRENT_VERSION = 0\nconst LAST_SAVED = 'LAST_SAVED'\n\nconst BETA_MESSAGE_DISMISSED = 'BETA_MESSAGE_DISMISSED'\nconst GENERAL_DAI__MESSAGE_DISMISSED = 'GENERAL_DAI__MESSAGE_DISMISSED'\nconst SAI_HOLDER__MESSAGE_DISMISSED = 'SAI_HOLDER__MESSAGE_DISMISSED'\nconst DARK_MODE = 'DARK_MODE'\n\nconst UPDATABLE_KEYS = [\n  GENERAL_DAI__MESSAGE_DISMISSED,\n  SAI_HOLDER__MESSAGE_DISMISSED,\n  BETA_MESSAGE_DISMISSED,\n  DARK_MODE\n]\n\nconst UPDATE_KEY = 'UPDATE_KEY'\n\nconst LocalStorageContext = createContext()\n\nfunction useLocalStorageContext() {\n  return useContext(LocalStorageContext)\n}\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case UPDATE_KEY: {\n      const { key, value } = payload\n      if (!UPDATABLE_KEYS.some(k => k === key)) {\n        throw Error(`Unexpected key in LocalStorageContext reducer: '${key}'.`)\n      } else {\n        return {\n          ...state,\n          [key]: value\n        }\n      }\n    }\n    default: {\n      throw Error(`Unexpected action type in LocalStorageContext reducer: '${type}'.`)\n    }\n  }\n}\n\nfunction init() {\n  const defaultLocalStorage = {\n    [VERSION]: CURRENT_VERSION,\n    [BETA_MESSAGE_DISMISSED]: false,\n    [GENERAL_DAI__MESSAGE_DISMISSED]: false,\n    [SAI_HOLDER__MESSAGE_DISMISSED]: false,\n    [DARK_MODE]: true\n  }\n\n  try {\n    const parsed = JSON.parse(window.localStorage.getItem(UNISWAP))\n    if (parsed[VERSION] !== CURRENT_VERSION) {\n      // this is where we could run migration logic\n      return defaultLocalStorage\n    } else {\n      return { ...defaultLocalStorage, ...parsed }\n    }\n  } catch {\n    return defaultLocalStorage\n  }\n}\n\nexport default function Provider({ children }) {\n  const [state, dispatch] = useReducer(reducer, undefined, init)\n\n  const updateKey = useCallback((key, value) => {\n    dispatch({ type: UPDATE_KEY, payload: { key, value } })\n  }, [])\n\n  return (\n    <LocalStorageContext.Provider value={useMemo(() => [state, { updateKey }], [state, updateKey])}>\n      {children}\n    </LocalStorageContext.Provider>\n  )\n}\n\nexport function Updater() {\n  const [state] = useLocalStorageContext()\n\n  useEffect(() => {\n    window.localStorage.setItem(UNISWAP, JSON.stringify({ ...state, [LAST_SAVED]: Math.floor(Date.now() / 1000) }))\n  })\n\n  return null\n}\n\nexport function useSaiHolderMessageManager() {\n  const [state, { updateKey }] = useLocalStorageContext()\n\n  const dismissSaiHolderMessage = useCallback(() => {\n    updateKey(SAI_HOLDER__MESSAGE_DISMISSED, true)\n  }, [updateKey])\n\n  return [!state[SAI_HOLDER__MESSAGE_DISMISSED], dismissSaiHolderMessage]\n}\n\nexport function useGeneralDaiMessageManager() {\n  const [state, { updateKey }] = useLocalStorageContext()\n\n  const dismissGeneralDaiMessage = useCallback(() => {\n    updateKey(GENERAL_DAI__MESSAGE_DISMISSED, true)\n  }, [updateKey])\n\n  return [!state[GENERAL_DAI__MESSAGE_DISMISSED], dismissGeneralDaiMessage]\n}\n\nexport function useBetaMessageManager() {\n  const [state, { updateKey }] = useLocalStorageContext()\n\n  const dismissBetaMessage = useCallback(() => {\n    updateKey(BETA_MESSAGE_DISMISSED, true)\n  }, [updateKey])\n\n  return [!state[BETA_MESSAGE_DISMISSED], dismissBetaMessage]\n}\n\nexport function useDarkModeManager() {\n  const [state, { updateKey }] = useLocalStorageContext()\n\n  let isDarkMode = state[DARK_MODE]\n\n  const toggleDarkMode = useCallback(\n    value => {\n      updateKey(DARK_MODE, value === false || value === true ? value : !isDarkMode)\n    },\n    [updateKey, isDarkMode]\n  )\n\n  return [state[DARK_MODE], toggleDarkMode]\n}\n"]},"metadata":{},"sourceType":"module"}