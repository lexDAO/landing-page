{"ast":null,"code":"var _jsxFileName = \"/Users/kerp/Documents/GitHub/landing-page/src/components/WalletModal/PendingView.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport Option from './Option';\nimport { SUPPORTED_WALLETS } from '../../constants';\nimport WalletConnectData from './WalletConnectData';\nimport { walletconnect, injected } from '../../connectors';\nimport { Spinner } from '../../theme';\nimport Circle from \"../../assets/images/circle.svg\";\nimport { darken } from 'polished';\nconst PendingSection = styled.div`\n  ${({\n  theme\n}) => theme.flexColumnNoWrap};\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  & > * {\n    width: 100%;\n  }\n`;\nconst SpinnerWrapper = styled(Spinner)`\n  font-size: 4rem;\n  margin-right: 1rem;\n  svg {\n    path {\n      color: ${({\n  theme\n}) => theme.placeholderGray};\n    }\n  }\n`;\nconst LoadingMessage = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: flex-start;\n  border-radius: 12px;\n  margin-bottom: 20px;\n  color: ${({\n  theme,\n  error\n}) => error ? theme.salmonRed : 'inherit'};\n  border: 1px solid ${({\n  theme,\n  error\n}) => error ? theme.salmonRed : theme.placeholderGray};\n\n  & > * {\n    padding: 1rem;\n  }\n`;\nconst ErrorGroup = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst ErrorButton = styled.div`\n  border-radius: 8px;\n  font-size: 12px;\n  color: ${({\n  theme\n}) => theme.textColor};\n  background-color: ${({\n  theme\n}) => theme.placeholderGray};\n  margin-left: 1rem;\n  padding: 0.5rem;\n  font-weight: 600;\n  user-select: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ${({\n  theme\n}) => darken(0.1, theme.placeholderGray)};\n  }\n`;\nconst LoadingWrapper = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: center;\n`;\nexport default function PendingView({\n  uri = '',\n  size,\n  connector,\n  error = false,\n  setPendingError,\n  tryActivation\n}) {\n  const isMetamask = window.ethereum && window.ethereum.isMetaMask;\n  return /*#__PURE__*/React.createElement(PendingSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, !error && connector === walletconnect && /*#__PURE__*/React.createElement(WalletConnectData, {\n    size: size,\n    uri: uri,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(LoadingMessage, {\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LoadingWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, !error && /*#__PURE__*/React.createElement(SpinnerWrapper, {\n    src: Circle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 22\n    }\n  }), error ? /*#__PURE__*/React.createElement(ErrorGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, \"Error connecting.\"), /*#__PURE__*/React.createElement(ErrorButton, {\n    onClick: () => {\n      setPendingError(false);\n      tryActivation(connector);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"Try Again\")) : connector === walletconnect ? 'Scan QR code with a compatible wallet...' : 'Initializing...')), Object.keys(SUPPORTED_WALLETS).map(key => {\n    const option = SUPPORTED_WALLETS[key];\n\n    if (option.connector === connector) {\n      if (option.connector === injected) {\n        if (isMetamask && option.name !== 'MetaMask') {\n          return null;\n        }\n\n        if (!isMetamask && option.name === 'MetaMask') {\n          return null;\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(Option, {\n        key: key,\n        clickable: false,\n        color: option.color,\n        header: option.name,\n        subheader: option.description,\n        icon: require('../../assets/images/' + option.iconName),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }\n      });\n    }\n\n    return null;\n  }));\n}","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/src/components/WalletModal/PendingView.js"],"names":["React","styled","Option","SUPPORTED_WALLETS","WalletConnectData","walletconnect","injected","Spinner","darken","PendingSection","div","theme","flexColumnNoWrap","SpinnerWrapper","placeholderGray","LoadingMessage","flexRowNoWrap","error","salmonRed","ErrorGroup","ErrorButton","textColor","LoadingWrapper","PendingView","uri","size","connector","setPendingError","tryActivation","isMetamask","window","ethereum","isMetaMask","Circle","Object","keys","map","key","option","name","color","description","require","iconName"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport Option from './Option'\nimport { SUPPORTED_WALLETS } from '../../constants'\nimport WalletConnectData from './WalletConnectData'\nimport { walletconnect, injected } from '../../connectors'\nimport { Spinner } from '../../theme'\nimport Circle from '../../assets/images/circle.svg'\nimport { darken } from 'polished'\n\nconst PendingSection = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap};\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  & > * {\n    width: 100%;\n  }\n`\n\nconst SpinnerWrapper = styled(Spinner)`\n  font-size: 4rem;\n  margin-right: 1rem;\n  svg {\n    path {\n      color: ${({ theme }) => theme.placeholderGray};\n    }\n  }\n`\n\nconst LoadingMessage = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: flex-start;\n  border-radius: 12px;\n  margin-bottom: 20px;\n  color: ${({ theme, error }) => (error ? theme.salmonRed : 'inherit')};\n  border: 1px solid ${({ theme, error }) => (error ? theme.salmonRed : theme.placeholderGray)};\n\n  & > * {\n    padding: 1rem;\n  }\n`\n\nconst ErrorGroup = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: flex-start;\n`\n\nconst ErrorButton = styled.div`\n  border-radius: 8px;\n  font-size: 12px;\n  color: ${({ theme }) => theme.textColor};\n  background-color: ${({ theme }) => theme.placeholderGray};\n  margin-left: 1rem;\n  padding: 0.5rem;\n  font-weight: 600;\n  user-select: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ${({ theme }) => darken(0.1, theme.placeholderGray)};\n  }\n`\n\nconst LoadingWrapper = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: center;\n`\n\nexport default function PendingView({ uri = '', size, connector, error = false, setPendingError, tryActivation }) {\n  const isMetamask = window.ethereum && window.ethereum.isMetaMask\n\n  return (\n    <PendingSection>\n      {!error && connector === walletconnect && <WalletConnectData size={size} uri={uri} />}\n      <LoadingMessage error={error}>\n        <LoadingWrapper>\n          {!error && <SpinnerWrapper src={Circle} />}\n          {error ? (\n            <ErrorGroup>\n              <div>Error connecting.</div>\n              <ErrorButton\n                onClick={() => {\n                  setPendingError(false)\n                  tryActivation(connector)\n                }}\n              >\n                Try Again\n              </ErrorButton>\n            </ErrorGroup>\n          ) : connector === walletconnect ? (\n            'Scan QR code with a compatible wallet...'\n          ) : (\n            'Initializing...'\n          )}\n        </LoadingWrapper>\n      </LoadingMessage>\n      {Object.keys(SUPPORTED_WALLETS).map(key => {\n        const option = SUPPORTED_WALLETS[key]\n        if (option.connector === connector) {\n          if (option.connector === injected) {\n            if (isMetamask && option.name !== 'MetaMask') {\n              return null\n            }\n            if (!isMetamask && option.name === 'MetaMask') {\n              return null\n            }\n          }\n          return (\n            <Option\n              key={key}\n              clickable={false}\n              color={option.color}\n              header={option.name}\n              subheader={option.description}\n              icon={require('../../assets/images/' + option.iconName)}\n            />\n          )\n        }\n        return null\n      })}\n    </PendingSection>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}