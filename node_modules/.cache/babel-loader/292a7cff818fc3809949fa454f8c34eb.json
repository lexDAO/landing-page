{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar AST = {\n  // Public API used to evaluate derived attributes regarding AST nodes\n  helpers: {\n    // a mustache is definitely a helper if:\n    // * it is an eligible helper, and\n    // * it has at least one parameter or hash segment\n    helperExpression: function helperExpression(node) {\n      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);\n    },\n    scopedId: function scopedId(path) {\n      return /^\\.|this\\b/.test(path.original);\n    },\n    // an ID is simple if it only has one part, and that part is not\n    // `..` or `this`.\n    simpleId: function simpleId(path) {\n      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;\n    }\n  }\n}; // Must be exported as an object rather than the root of the module as the jison lexer\n// must modify the object to operate properly.\n\nexports['default'] = AST;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../../../lib/handlebars/compiler/ast.js"],"names":[],"mappings":";;;AAAA,IAAI,GAAG,GAAG;;AAER,EAAA,OAAO,EAAE;;;;AAIP,IAAA,gBAAgB,EAAE,SAAA,gBAAA,CAAS,IAAT,EAAe;AAC/B,aACE,IAAI,CAAC,IAAL,KAAc,eAAd,IACC,CAAC,IAAI,CAAC,IAAL,KAAc,mBAAd,IACA,IAAI,CAAC,IAAL,KAAc,gBADf,KAEC,CAAC,EAAG,IAAI,CAAC,MAAL,IAAe,IAAI,CAAC,MAAL,CAAY,MAA3B,IAAsC,IAAI,CAAC,IAA9C,CAJL;AAMD,KAXM;AAaP,IAAA,QAAQ,EAAE,SAAA,QAAA,CAAS,IAAT,EAAe;AACvB,aAAO,aAAa,IAAb,CAAkB,IAAI,CAAC,QAAvB,CAAP;AACD,KAfM;;;AAmBP,IAAA,QAAQ,EAAE,SAAA,QAAA,CAAS,IAAT,EAAe;AACvB,aACE,IAAI,CAAC,KAAL,CAAW,MAAX,KAAsB,CAAtB,IAA2B,CAAC,GAAG,CAAC,OAAJ,CAAY,QAAZ,CAAqB,IAArB,CAA5B,IAA0D,CAAC,IAAI,CAAC,KADlE;AAGD;AAvBM;AAFD,CAAV,C;;;qBA+Be,G","sourcesContent":["let AST = {\n  // Public API used to evaluate derived attributes regarding AST nodes\n  helpers: {\n    // a mustache is definitely a helper if:\n    // * it is an eligible helper, and\n    // * it has at least one parameter or hash segment\n    helperExpression: function(node) {\n      return (\n        node.type === 'SubExpression' ||\n        ((node.type === 'MustacheStatement' ||\n          node.type === 'BlockStatement') &&\n          !!((node.params && node.params.length) || node.hash))\n      );\n    },\n\n    scopedId: function(path) {\n      return /^\\.|this\\b/.test(path.original);\n    },\n\n    // an ID is simple if it only has one part, and that part is not\n    // `..` or `this`.\n    simpleId: function(path) {\n      return (\n        path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth\n      );\n    }\n  }\n};\n\n// Must be exported as an object rather than the root of the module as the jison lexer\n// must modify the object to operate properly.\nexport default AST;\n"]},"metadata":{},"sourceType":"script"}