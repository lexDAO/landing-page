{"ast":null,"code":"import { ethers } from 'ethers';\nimport FACTORY_ABI from '../constants/abis/lexToken';\nimport EXCHANGE_ABI from '../constants/abis/exchange';\nimport ERC20_ABI from '../constants/abis/erc20';\nimport ERC20_BYTES32_ABI from '../constants/abis/erc20_bytes32';\nimport { FACTORY_ADDRESSES, SUPPORTED_THEMES } from '../constants';\nimport { formatFixed } from '@uniswap/sdk';\nimport UncheckedJsonRpcSigner from './signer';\nexport const ERROR_CODES = ['TOKEN_NAME', 'TOKEN_SYMBOL', 'TOKEN_DECIMALS'].reduce((accumulator, currentValue, currentIndex) => {\n  accumulator[currentValue] = currentIndex;\n  return accumulator;\n}, {});\nexport function safeAccess(object, path) {\n  return object ? path.reduce((accumulator, currentValue) => accumulator && accumulator[currentValue] ? accumulator[currentValue] : null, object) : null;\n}\nconst ETHERSCAN_PREFIXES = {\n  1: '',\n  3: 'ropsten.',\n  4: 'rinkeby.',\n  5: 'goerli.',\n  42: 'kovan.'\n};\nexport function getEtherscanLink(networkId, data, type) {\n  const prefix = `https://${ETHERSCAN_PREFIXES[networkId] || ETHERSCAN_PREFIXES[1]}etherscan.io`;\n\n  switch (type) {\n    case 'transaction':\n      {\n        return `${prefix}/tx/${data}`;\n      }\n\n    case 'address':\n    default:\n      {\n        return `${prefix}/address/${data}`;\n      }\n  }\n}\nexport function getQueryParam(windowLocation, name) {\n  var q = windowLocation.search.match(new RegExp('[?&]' + name + '=([^&#?]*)'));\n  return q && q[1];\n}\nexport function getAllQueryParams() {\n  let params = {};\n  params.theme = checkSupportedTheme(getQueryParam(window.location, 'theme'));\n  params.inputCurrency = isAddress(getQueryParam(window.location, 'inputCurrency')) ? isAddress(getQueryParam(window.location, 'inputCurrency')) : '';\n  params.outputCurrency = isAddress(getQueryParam(window.location, 'outputCurrency')) ? isAddress(getQueryParam(window.location, 'outputCurrency')) : getQueryParam(window.location, 'outputCurrency') === 'ETH' ? 'ETH' : '';\n  params.slippage = !isNaN(getQueryParam(window.location, 'slippage')) ? getQueryParam(window.location, 'slippage') : '';\n  params.exactField = getQueryParam(window.location, 'exactField');\n  params.exactAmount = !isNaN(getQueryParam(window.location, 'exactAmount')) ? getQueryParam(window.location, 'exactAmount') : '';\n  params.theme = checkSupportedTheme(getQueryParam(window.location, 'theme'));\n  params.recipient = isAddress(getQueryParam(window.location, 'recipient')) ? getQueryParam(window.location, 'recipient') : ''; // Add Liquidity params\n\n  params.ethAmount = !isNaN(getQueryParam(window.location, 'ethAmount')) ? getQueryParam(window.location, 'ethAmount') : '';\n  params.tokenAmount = !isNaN(getQueryParam(window.location, 'tokenAmount')) ? getQueryParam(window.location, 'tokenAmount') : '';\n  params.token = isAddress(getQueryParam(window.location, 'token')) ? isAddress(getQueryParam(window.location, 'token')) : ''; // Remove liquidity params\n\n  params.poolTokenAmount = !isNaN(getQueryParam(window.location, 'poolTokenAmount')) ? getQueryParam(window.location, 'poolTokenAmount') : '';\n  params.poolTokenAddress = isAddress(getQueryParam(window.location, 'poolTokenAddress')) ? isAddress(getQueryParam(window.location, 'poolTokenAddress')) ? isAddress(getQueryParam(window.location, 'poolTokenAddress')) : '' : ''; // Create Exchange params\n\n  params.tokenAddress = isAddress(getQueryParam(window.location, 'tokenAddress')) ? isAddress(getQueryParam(window.location, 'tokenAddress')) : '';\n  return params;\n}\nexport function checkSupportedTheme(themeName) {\n  if (themeName && themeName.toUpperCase() in SUPPORTED_THEMES) {\n    return themeName.toUpperCase();\n  }\n\n  return null;\n}\nexport function getNetworkName(networkId) {\n  switch (networkId) {\n    case 1:\n      {\n        return 'the Main Ethereum Network';\n      }\n\n    case 3:\n      {\n        return 'the Ropsten Test Network';\n      }\n\n    case 4:\n      {\n        return 'the Rinkeby Test Network';\n      }\n\n    case 5:\n      {\n        return 'the GÃ¶rli Test Network';\n      }\n\n    case 42:\n      {\n        return 'the Kovan Test Network';\n      }\n\n    default:\n      {\n        return 'the correct network';\n      }\n  }\n}\nexport function shortenAddress(address, digits = 4) {\n  if (!isAddress(address)) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return `${address.substring(0, digits + 2)}...${address.substring(42 - digits)}`;\n}\nexport function shortenTransactionHash(hash, digits = 4) {\n  return `${hash.substring(0, digits + 2)}...${hash.substring(66 - digits)}`;\n}\nexport function isAddress(value) {\n  try {\n    return ethers.utils.getAddress(value.toLowerCase());\n  } catch {\n    return false;\n  }\n}\nexport function calculateGasMargin(value, margin) {\n  const offset = value.mul(margin).div(ethers.utils.bigNumberify(10000));\n  return value.add(offset);\n} // account is optional\n\nexport function getProviderOrSigner(library, account) {\n  return account ? new UncheckedJsonRpcSigner(library.getSigner(account)) : library;\n} // account is optional\n\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === ethers.constants.AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new ethers.Contract(address, ABI, getProviderOrSigner(library, account));\n} // account is optional\n\nexport function getFactoryContract(networkId, library, account) {\n  return getContract(FACTORY_ADDRESSES[networkId], FACTORY_ABI, library, account);\n} // account is optional\n\nexport function getExchangeContract(exchangeAddress, library, account) {\n  return getContract(exchangeAddress, EXCHANGE_ABI, library, account);\n} // get token name\n\nexport async function getTokenName(tokenAddress, library) {\n  if (!isAddress(tokenAddress)) {\n    throw Error(`Invalid 'tokenAddress' parameter '${tokenAddress}'.`);\n  }\n\n  return getContract(tokenAddress, ERC20_ABI, library).name().catch(() => getContract(tokenAddress, ERC20_BYTES32_ABI, library).name().then(bytes32 => ethers.utils.parseBytes32String(bytes32))).catch(error => {\n    error.code = ERROR_CODES.TOKEN_SYMBOL;\n    throw error;\n  });\n} // get token symbol\n\nexport async function getTokenSymbol(tokenAddress, library) {\n  if (!isAddress(tokenAddress)) {\n    throw Error(`Invalid 'tokenAddress' parameter '${tokenAddress}'.`);\n  }\n\n  return getContract(tokenAddress, ERC20_ABI, library).symbol().catch(() => {\n    const contractBytes32 = getContract(tokenAddress, ERC20_BYTES32_ABI, library);\n    return contractBytes32.symbol().then(bytes32 => ethers.utils.parseBytes32String(bytes32));\n  }).catch(error => {\n    error.code = ERROR_CODES.TOKEN_SYMBOL;\n    throw error;\n  });\n} // get token decimals\n\nexport async function getTokenDecimals(tokenAddress, library) {\n  if (!isAddress(tokenAddress)) {\n    throw Error(`Invalid 'tokenAddress' parameter '${tokenAddress}'.`);\n  }\n\n  return getContract(tokenAddress, ERC20_ABI, library).decimals().catch(error => {\n    error.code = ERROR_CODES.TOKEN_DECIMALS;\n    throw error;\n  });\n} // get the exchange address for a token from the factory\n\nexport async function getTokenExchangeAddressFromFactory(tokenAddress, networkId, library) {\n  return getFactoryContract(networkId, library).getExchange(tokenAddress);\n} // get the ether balance of an address\n\nexport async function getEtherBalance(address, library) {\n  if (!isAddress(address)) {\n    throw Error(`Invalid 'address' parameter '${address}'`);\n  }\n\n  return library.getBalance(address);\n}\nexport function formatEthBalance(balance) {\n  return amountFormatter(balance, 18, 6);\n}\nexport function formatTokenBalance(balance, decimal) {\n  return !!(balance && Number.isInteger(decimal)) ? amountFormatter(balance, decimal, Math.min(4, decimal)) : 0;\n}\nexport function formatToUsd(price) {\n  const format = {\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    groupSize: 3\n  };\n  const usdPrice = formatFixed(price, {\n    decimalPlaces: 2,\n    dropTrailingZeros: false,\n    format\n  });\n  return usdPrice;\n} // get the token balance of an address\n\nexport async function getTokenBalance(tokenAddress, address, library) {\n  if (!isAddress(tokenAddress) || !isAddress(address)) {\n    throw Error(`Invalid 'tokenAddress' or 'address' parameter '${tokenAddress}' or '${address}'.`);\n  }\n\n  return getContract(tokenAddress, ERC20_ABI, library).balanceOf(address);\n} // get the token allowance\n\nexport async function getTokenAllowance(address, tokenAddress, spenderAddress, library) {\n  if (!isAddress(address) || !isAddress(tokenAddress) || !isAddress(spenderAddress)) {\n    throw Error(\"Invalid 'address' or 'tokenAddress' or 'spenderAddress' parameter\" + `'${address}' or '${tokenAddress}' or '${spenderAddress}'.`);\n  }\n\n  return getContract(tokenAddress, ERC20_ABI, library).allowance(address, spenderAddress);\n} // amount must be a BigNumber, {base,display}Decimals must be Numbers\n\nexport function amountFormatter(amount, baseDecimals = 18, displayDecimals = 3, useLessThan = true) {\n  if (baseDecimals > 18 || displayDecimals > 18 || displayDecimals > baseDecimals) {\n    throw Error(`Invalid combination of baseDecimals '${baseDecimals}' and displayDecimals '${displayDecimals}.`);\n  } // if balance is falsy, return undefined\n\n\n  if (!amount) {\n    return undefined;\n  } // if amount is 0, return\n  else if (amount.isZero()) {\n      return '0';\n    } // amount > 0\n    else {\n        // amount of 'wei' in 1 'ether'\n        const baseAmount = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(baseDecimals));\n        const minimumDisplayAmount = baseAmount.div(ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(displayDecimals))); // if balance is less than the minimum display amount\n\n        if (amount.lt(minimumDisplayAmount)) {\n          return useLessThan ? `<${ethers.utils.formatUnits(minimumDisplayAmount, baseDecimals)}` : `${ethers.utils.formatUnits(amount, baseDecimals)}`;\n        } // if the balance is greater than the minimum display amount\n        else {\n            const stringAmount = ethers.utils.formatUnits(amount, baseDecimals); // if there isn't a decimal portion\n\n            if (!stringAmount.match(/\\./)) {\n              return stringAmount;\n            } // if there is a decimal portion\n            else {\n                const [wholeComponent, decimalComponent] = stringAmount.split('.');\n                const roundedDecimalComponent = ethers.utils.bigNumberify(decimalComponent.padEnd(baseDecimals, '0')).toString().padStart(baseDecimals, '0').substring(0, displayDecimals); // decimals are too small to show\n\n                if (roundedDecimalComponent === '0'.repeat(displayDecimals)) {\n                  return wholeComponent;\n                } // decimals are not too small to show\n                else {\n                    return `${wholeComponent}.${roundedDecimalComponent.toString().replace(/0*$/, '')}`;\n                  }\n              }\n          }\n      }\n}","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/src/utils/index.js"],"names":["ethers","FACTORY_ABI","EXCHANGE_ABI","ERC20_ABI","ERC20_BYTES32_ABI","FACTORY_ADDRESSES","SUPPORTED_THEMES","formatFixed","UncheckedJsonRpcSigner","ERROR_CODES","reduce","accumulator","currentValue","currentIndex","safeAccess","object","path","ETHERSCAN_PREFIXES","getEtherscanLink","networkId","data","type","prefix","getQueryParam","windowLocation","name","q","search","match","RegExp","getAllQueryParams","params","theme","checkSupportedTheme","window","location","inputCurrency","isAddress","outputCurrency","slippage","isNaN","exactField","exactAmount","recipient","ethAmount","tokenAmount","token","poolTokenAmount","poolTokenAddress","tokenAddress","themeName","toUpperCase","getNetworkName","shortenAddress","address","digits","Error","substring","shortenTransactionHash","hash","value","utils","getAddress","toLowerCase","calculateGasMargin","margin","offset","mul","div","bigNumberify","add","getProviderOrSigner","library","account","getSigner","getContract","ABI","constants","AddressZero","Contract","getFactoryContract","getExchangeContract","exchangeAddress","getTokenName","catch","then","bytes32","parseBytes32String","error","code","TOKEN_SYMBOL","getTokenSymbol","symbol","contractBytes32","getTokenDecimals","decimals","TOKEN_DECIMALS","getTokenExchangeAddressFromFactory","getExchange","getEtherBalance","getBalance","formatEthBalance","balance","amountFormatter","formatTokenBalance","decimal","Number","isInteger","Math","min","formatToUsd","price","format","decimalSeparator","groupSeparator","groupSize","usdPrice","decimalPlaces","dropTrailingZeros","getTokenBalance","balanceOf","getTokenAllowance","spenderAddress","allowance","amount","baseDecimals","displayDecimals","useLessThan","undefined","isZero","baseAmount","pow","minimumDisplayAmount","lt","formatUnits","stringAmount","wholeComponent","decimalComponent","split","roundedDecimalComponent","padEnd","toString","padStart","repeat","replace"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers'\n\nimport FACTORY_ABI from '../constants/abis/lexToken'\nimport EXCHANGE_ABI from '../constants/abis/exchange'\nimport ERC20_ABI from '../constants/abis/erc20'\nimport ERC20_BYTES32_ABI from '../constants/abis/erc20_bytes32'\nimport { FACTORY_ADDRESSES, SUPPORTED_THEMES } from '../constants'\nimport { formatFixed } from '@uniswap/sdk'\n\nimport UncheckedJsonRpcSigner from './signer'\n\nexport const ERROR_CODES = ['TOKEN_NAME', 'TOKEN_SYMBOL', 'TOKEN_DECIMALS'].reduce(\n  (accumulator, currentValue, currentIndex) => {\n    accumulator[currentValue] = currentIndex\n    return accumulator\n  },\n  {}\n)\n\nexport function safeAccess(object, path) {\n  return object\n    ? path.reduce(\n        (accumulator, currentValue) => (accumulator && accumulator[currentValue] ? accumulator[currentValue] : null),\n        object\n      )\n    : null\n}\n\nconst ETHERSCAN_PREFIXES = {\n  1: '',\n  3: 'ropsten.',\n  4: 'rinkeby.',\n  5: 'goerli.',\n  42: 'kovan.'\n}\n\nexport function getEtherscanLink(networkId, data, type) {\n  const prefix = `https://${ETHERSCAN_PREFIXES[networkId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\nexport function getQueryParam(windowLocation, name) {\n  var q = windowLocation.search.match(new RegExp('[?&]' + name + '=([^&#?]*)'))\n  return q && q[1]\n}\n\nexport function getAllQueryParams() {\n  let params = {}\n  params.theme = checkSupportedTheme(getQueryParam(window.location, 'theme'))\n\n  params.inputCurrency = isAddress(getQueryParam(window.location, 'inputCurrency'))\n    ? isAddress(getQueryParam(window.location, 'inputCurrency'))\n    : ''\n  params.outputCurrency = isAddress(getQueryParam(window.location, 'outputCurrency'))\n    ? isAddress(getQueryParam(window.location, 'outputCurrency'))\n    : getQueryParam(window.location, 'outputCurrency') === 'ETH'\n    ? 'ETH'\n    : ''\n  params.slippage = !isNaN(getQueryParam(window.location, 'slippage')) ? getQueryParam(window.location, 'slippage') : ''\n  params.exactField = getQueryParam(window.location, 'exactField')\n  params.exactAmount = !isNaN(getQueryParam(window.location, 'exactAmount'))\n    ? getQueryParam(window.location, 'exactAmount')\n    : ''\n  params.theme = checkSupportedTheme(getQueryParam(window.location, 'theme'))\n  params.recipient = isAddress(getQueryParam(window.location, 'recipient'))\n    ? getQueryParam(window.location, 'recipient')\n    : ''\n\n  // Add Liquidity params\n  params.ethAmount = !isNaN(getQueryParam(window.location, 'ethAmount'))\n    ? getQueryParam(window.location, 'ethAmount')\n    : ''\n  params.tokenAmount = !isNaN(getQueryParam(window.location, 'tokenAmount'))\n    ? getQueryParam(window.location, 'tokenAmount')\n    : ''\n  params.token = isAddress(getQueryParam(window.location, 'token'))\n    ? isAddress(getQueryParam(window.location, 'token'))\n    : ''\n\n  // Remove liquidity params\n  params.poolTokenAmount = !isNaN(getQueryParam(window.location, 'poolTokenAmount'))\n    ? getQueryParam(window.location, 'poolTokenAmount')\n    : ''\n  params.poolTokenAddress = isAddress(getQueryParam(window.location, 'poolTokenAddress'))\n    ? isAddress(getQueryParam(window.location, 'poolTokenAddress'))\n      ? isAddress(getQueryParam(window.location, 'poolTokenAddress'))\n      : ''\n    : ''\n\n  // Create Exchange params\n  params.tokenAddress = isAddress(getQueryParam(window.location, 'tokenAddress'))\n    ? isAddress(getQueryParam(window.location, 'tokenAddress'))\n    : ''\n\n  return params\n}\n\nexport function checkSupportedTheme(themeName) {\n  if (themeName && themeName.toUpperCase() in SUPPORTED_THEMES) {\n    return themeName.toUpperCase()\n  }\n  return null\n}\n\nexport function getNetworkName(networkId) {\n  switch (networkId) {\n    case 1: {\n      return 'the Main Ethereum Network'\n    }\n    case 3: {\n      return 'the Ropsten Test Network'\n    }\n    case 4: {\n      return 'the Rinkeby Test Network'\n    }\n    case 5: {\n      return 'the GÃ¶rli Test Network'\n    }\n    case 42: {\n      return 'the Kovan Test Network'\n    }\n    default: {\n      return 'the correct network'\n    }\n  }\n}\n\nexport function shortenAddress(address, digits = 4) {\n  if (!isAddress(address)) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${address.substring(0, digits + 2)}...${address.substring(42 - digits)}`\n}\n\nexport function shortenTransactionHash(hash, digits = 4) {\n  return `${hash.substring(0, digits + 2)}...${hash.substring(66 - digits)}`\n}\n\nexport function isAddress(value) {\n  try {\n    return ethers.utils.getAddress(value.toLowerCase())\n  } catch {\n    return false\n  }\n}\n\nexport function calculateGasMargin(value, margin) {\n  const offset = value.mul(margin).div(ethers.utils.bigNumberify(10000))\n  return value.add(offset)\n}\n\n// account is optional\nexport function getProviderOrSigner(library, account) {\n  return account ? new UncheckedJsonRpcSigner(library.getSigner(account)) : library\n}\n\n// account is optional\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === ethers.constants.AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new ethers.Contract(address, ABI, getProviderOrSigner(library, account))\n}\n\n// account is optional\nexport function getFactoryContract(networkId, library, account) {\n  return getContract(FACTORY_ADDRESSES[networkId], FACTORY_ABI, library, account)\n}\n\n// account is optional\nexport function getExchangeContract(exchangeAddress, library, account) {\n  return getContract(exchangeAddress, EXCHANGE_ABI, library, account)\n}\n\n// get token name\nexport async function getTokenName(tokenAddress, library) {\n  if (!isAddress(tokenAddress)) {\n    throw Error(`Invalid 'tokenAddress' parameter '${tokenAddress}'.`)\n  }\n\n  return getContract(tokenAddress, ERC20_ABI, library)\n    .name()\n    .catch(() =>\n      getContract(tokenAddress, ERC20_BYTES32_ABI, library)\n        .name()\n        .then(bytes32 => ethers.utils.parseBytes32String(bytes32))\n    )\n    .catch(error => {\n      error.code = ERROR_CODES.TOKEN_SYMBOL\n      throw error\n    })\n}\n\n// get token symbol\nexport async function getTokenSymbol(tokenAddress, library) {\n  if (!isAddress(tokenAddress)) {\n    throw Error(`Invalid 'tokenAddress' parameter '${tokenAddress}'.`)\n  }\n\n  return getContract(tokenAddress, ERC20_ABI, library)\n    .symbol()\n    .catch(() => {\n      const contractBytes32 = getContract(tokenAddress, ERC20_BYTES32_ABI, library)\n      return contractBytes32.symbol().then(bytes32 => ethers.utils.parseBytes32String(bytes32))\n    })\n    .catch(error => {\n      error.code = ERROR_CODES.TOKEN_SYMBOL\n      throw error\n    })\n}\n\n// get token decimals\nexport async function getTokenDecimals(tokenAddress, library) {\n  if (!isAddress(tokenAddress)) {\n    throw Error(`Invalid 'tokenAddress' parameter '${tokenAddress}'.`)\n  }\n\n  return getContract(tokenAddress, ERC20_ABI, library)\n    .decimals()\n    .catch(error => {\n      error.code = ERROR_CODES.TOKEN_DECIMALS\n      throw error\n    })\n}\n\n// get the exchange address for a token from the factory\nexport async function getTokenExchangeAddressFromFactory(tokenAddress, networkId, library) {\n  return getFactoryContract(networkId, library).getExchange(tokenAddress)\n}\n\n// get the ether balance of an address\nexport async function getEtherBalance(address, library) {\n  if (!isAddress(address)) {\n    throw Error(`Invalid 'address' parameter '${address}'`)\n  }\n  return library.getBalance(address)\n}\n\nexport function formatEthBalance(balance) {\n  return amountFormatter(balance, 18, 6)\n}\n\nexport function formatTokenBalance(balance, decimal) {\n  return !!(balance && Number.isInteger(decimal)) ? amountFormatter(balance, decimal, Math.min(4, decimal)) : 0\n}\n\nexport function formatToUsd(price) {\n  const format = { decimalSeparator: '.', groupSeparator: ',', groupSize: 3 }\n  const usdPrice = formatFixed(price, {\n    decimalPlaces: 2,\n    dropTrailingZeros: false,\n    format\n  })\n  return usdPrice\n}\n\n// get the token balance of an address\nexport async function getTokenBalance(tokenAddress, address, library) {\n  if (!isAddress(tokenAddress) || !isAddress(address)) {\n    throw Error(`Invalid 'tokenAddress' or 'address' parameter '${tokenAddress}' or '${address}'.`)\n  }\n\n  return getContract(tokenAddress, ERC20_ABI, library).balanceOf(address)\n}\n\n// get the token allowance\nexport async function getTokenAllowance(address, tokenAddress, spenderAddress, library) {\n  if (!isAddress(address) || !isAddress(tokenAddress) || !isAddress(spenderAddress)) {\n    throw Error(\n      \"Invalid 'address' or 'tokenAddress' or 'spenderAddress' parameter\" +\n        `'${address}' or '${tokenAddress}' or '${spenderAddress}'.`\n    )\n  }\n\n  return getContract(tokenAddress, ERC20_ABI, library).allowance(address, spenderAddress)\n}\n\n// amount must be a BigNumber, {base,display}Decimals must be Numbers\nexport function amountFormatter(amount, baseDecimals = 18, displayDecimals = 3, useLessThan = true) {\n  if (baseDecimals > 18 || displayDecimals > 18 || displayDecimals > baseDecimals) {\n    throw Error(`Invalid combination of baseDecimals '${baseDecimals}' and displayDecimals '${displayDecimals}.`)\n  }\n\n  // if balance is falsy, return undefined\n  if (!amount) {\n    return undefined\n  }\n  // if amount is 0, return\n  else if (amount.isZero()) {\n    return '0'\n  }\n  // amount > 0\n  else {\n    // amount of 'wei' in 1 'ether'\n    const baseAmount = ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(baseDecimals))\n\n    const minimumDisplayAmount = baseAmount.div(\n      ethers.utils.bigNumberify(10).pow(ethers.utils.bigNumberify(displayDecimals))\n    )\n\n    // if balance is less than the minimum display amount\n    if (amount.lt(minimumDisplayAmount)) {\n      return useLessThan\n        ? `<${ethers.utils.formatUnits(minimumDisplayAmount, baseDecimals)}`\n        : `${ethers.utils.formatUnits(amount, baseDecimals)}`\n    }\n    // if the balance is greater than the minimum display amount\n    else {\n      const stringAmount = ethers.utils.formatUnits(amount, baseDecimals)\n\n      // if there isn't a decimal portion\n      if (!stringAmount.match(/\\./)) {\n        return stringAmount\n      }\n      // if there is a decimal portion\n      else {\n        const [wholeComponent, decimalComponent] = stringAmount.split('.')\n        const roundedDecimalComponent = ethers.utils\n          .bigNumberify(decimalComponent.padEnd(baseDecimals, '0'))\n          .toString()\n          .padStart(baseDecimals, '0')\n          .substring(0, displayDecimals)\n\n        // decimals are too small to show\n        if (roundedDecimalComponent === '0'.repeat(displayDecimals)) {\n          return wholeComponent\n        }\n        // decimals are not too small to show\n        else {\n          return `${wholeComponent}.${roundedDecimalComponent.toString().replace(/0*$/, '')}`\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}