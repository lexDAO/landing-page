{"ast":null,"code":"import { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector';\nexport const OVERLAY_READY = 'OVERLAY_READY';\nconst chainIdToNetwork = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n};\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const {\n        default: Fortmatic\n      } = await import('fortmatic');\n      this.fortmatic = new Fortmatic(this.apiKey, this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]);\n    }\n\n    const provider = this.fortmatic.getProvider();\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve();\n        }\n      }, 200);\n    });\n    const [account] = await Promise.all([provider.enable().then(accounts => accounts[0]), pollForOverlayReady]);\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: this.chainId,\n      account\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/src/connectors/Fortmatic.js"],"names":["FortmaticConnector","FortmaticConnectorCore","OVERLAY_READY","chainIdToNetwork","activate","fortmatic","default","Fortmatic","apiKey","chainId","undefined","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","account","all","enable","then","accounts"],"mappings":"AAAA,SAASA,kBAAkB,IAAIC,sBAA/B,QAA6D,iCAA7D;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAEP,MAAMC,gBAAgB,GAAG;AACvB,KAAG,SADoB;AAEvB,KAAG,SAFoB;AAGvB,KAAG,SAHoB;AAIvB,MAAI;AAJmB,CAAzB;AAOA,OAAO,MAAMH,kBAAN,SAAiCC,sBAAjC,CAAwD;AAC7D,QAAMG,QAAN,GAAiB;AACf,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAM;AAAEC,QAAAA,OAAO,EAAEC;AAAX,UAAyB,MAAM,OAAO,WAAP,CAArC;AACA,WAAKF,SAAL,GAAiB,IAAIE,SAAJ,CACf,KAAKC,MADU,EAEf,KAAKC,OAAL,KAAiB,CAAjB,IAAsB,KAAKA,OAAL,KAAiB,CAAvC,GAA2CC,SAA3C,GAAuDP,gBAAgB,CAAC,KAAKM,OAAN,CAFxD,CAAjB;AAID;;AAED,UAAME,QAAQ,GAAG,KAAKN,SAAL,CAAeO,WAAf,EAAjB;AAEA,UAAMC,mBAAmB,GAAG,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACjD,YAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAIN,QAAQ,CAACO,YAAb,EAA2B;AACzBC,UAAAA,aAAa,CAACH,QAAD,CAAb;AACA,eAAKI,IAAL,CAAUlB,aAAV;AACAa,UAAAA,OAAO;AACR;AACF,OAN2B,EAMzB,GANyB,CAA5B;AAOD,KAR2B,CAA5B;AAUA,UAAM,CAACM,OAAD,IAAY,MAAMP,OAAO,CAACQ,GAAR,CAAY,CAACX,QAAQ,CAACY,MAAT,GAAkBC,IAAlB,CAAuBC,QAAQ,IAAIA,QAAQ,CAAC,CAAD,CAA3C,CAAD,EAAkDZ,mBAAlD,CAAZ,CAAxB;AAEA,WAAO;AAAEF,MAAAA,QAAQ,EAAE,KAAKN,SAAL,CAAeO,WAAf,EAAZ;AAA0CH,MAAAA,OAAO,EAAE,KAAKA,OAAxD;AAAiEY,MAAAA;AAAjE,KAAP;AACD;;AAzB4D","sourcesContent":["import { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector'\n\nexport const OVERLAY_READY = 'OVERLAY_READY'\n\nconst chainIdToNetwork = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const { default: Fortmatic } = await import('fortmatic')\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const provider = this.fortmatic.getProvider()\n\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval)\n          this.emit(OVERLAY_READY)\n          resolve()\n        }\n      }, 200)\n    })\n\n    const [account] = await Promise.all([provider.enable().then(accounts => accounts[0]), pollForOverlayReady])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}