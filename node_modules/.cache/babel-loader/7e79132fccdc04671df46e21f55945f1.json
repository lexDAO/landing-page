{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.createProtoAccessControl = createProtoAccessControl;\nexports.resultIsAllowed = resultIsAllowed;\nexports.resetLoggedProperties = resetLoggedProperties; // istanbul ignore next\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nvar _createNewLookupObject = require('./create-new-lookup-object');\n\nvar _logger = require('../logger');\n\nvar logger = _interopRequireWildcard(_logger);\n\nvar loggedProperties = Object.create(null);\n\nfunction createProtoAccessControl(runtimeOptions) {\n  var defaultMethodWhiteList = Object.create(null);\n  defaultMethodWhiteList['constructor'] = false;\n  defaultMethodWhiteList['__defineGetter__'] = false;\n  defaultMethodWhiteList['__defineSetter__'] = false;\n  defaultMethodWhiteList['__lookupGetter__'] = false;\n  var defaultPropertyWhiteList = Object.create(null); // eslint-disable-next-line no-proto\n\n  defaultPropertyWhiteList['__proto__'] = false;\n  return {\n    properties: {\n      whitelist: _createNewLookupObject.createNewLookupObject(defaultPropertyWhiteList, runtimeOptions.allowedProtoProperties),\n      defaultValue: runtimeOptions.allowProtoPropertiesByDefault\n    },\n    methods: {\n      whitelist: _createNewLookupObject.createNewLookupObject(defaultMethodWhiteList, runtimeOptions.allowedProtoMethods),\n      defaultValue: runtimeOptions.allowProtoMethodsByDefault\n    }\n  };\n}\n\nfunction resultIsAllowed(result, protoAccessControl, propertyName) {\n  if (typeof result === 'function') {\n    return checkWhiteList(protoAccessControl.methods, propertyName);\n  } else {\n    return checkWhiteList(protoAccessControl.properties, propertyName);\n  }\n}\n\nfunction checkWhiteList(protoAccessControlForType, propertyName) {\n  if (protoAccessControlForType.whitelist[propertyName] !== undefined) {\n    return protoAccessControlForType.whitelist[propertyName] === true;\n  }\n\n  if (protoAccessControlForType.defaultValue !== undefined) {\n    return protoAccessControlForType.defaultValue;\n  }\n\n  logUnexpecedPropertyAccessOnce(propertyName);\n  return false;\n}\n\nfunction logUnexpecedPropertyAccessOnce(propertyName) {\n  if (loggedProperties[propertyName] !== true) {\n    loggedProperties[propertyName] = true;\n    logger.log('error', 'Handlebars: Access has been denied to resolve the property \"' + propertyName + '\" because it is not an \"own property\" of its parent.\\n' + 'You can add a runtime option to disable the check or this warning:\\n' + 'See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details');\n  }\n}\n\nfunction resetLoggedProperties() {\n  Object.keys(loggedProperties).forEach(function (propertyName) {\n    delete loggedProperties[propertyName];\n  });\n}","map":{"version":3,"sources":["../../../../lib/handlebars/internal/proto-access.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;qCAAsC,4B;;sBACd,W;;IAAZ,MAAM,GAAA,uBAAA,CAAA,OAAA,C;;AAElB,IAAM,gBAAgB,GAAG,MAAM,CAAC,MAAP,CAAc,IAAd,CAAzB;;AAEO,SAAS,wBAAT,CAAkC,cAAlC,EAAkD;AACvD,MAAI,sBAAsB,GAAG,MAAM,CAAC,MAAP,CAAc,IAAd,CAA7B;AACA,EAAA,sBAAsB,CAAC,aAAD,CAAtB,GAAwC,KAAxC;AACA,EAAA,sBAAsB,CAAC,kBAAD,CAAtB,GAA6C,KAA7C;AACA,EAAA,sBAAsB,CAAC,kBAAD,CAAtB,GAA6C,KAA7C;AACA,EAAA,sBAAsB,CAAC,kBAAD,CAAtB,GAA6C,KAA7C;AAEA,MAAI,wBAAwB,GAAG,MAAM,CAAC,MAAP,CAAc,IAAd,CAA/B,CAPuD,C;;AASvD,EAAA,wBAAwB,CAAC,WAAD,CAAxB,GAAwC,KAAxC;AAEA,SAAO;AACL,IAAA,UAAU,EAAE;AACV,MAAA,SAAS,EAAE,sBAAA,CAAA,qBAAA,CACT,wBADS,EAET,cAAc,CAAC,sBAFN,CADD;AAKV,MAAA,YAAY,EAAE,cAAc,CAAC;AALnB,KADP;AAQL,IAAA,OAAO,EAAE;AACP,MAAA,SAAS,EAAE,sBAAA,CAAA,qBAAA,CACT,sBADS,EAET,cAAc,CAAC,mBAFN,CADJ;AAKP,MAAA,YAAY,EAAE,cAAc,CAAC;AALtB;AARJ,GAAP;AAgBD;;AAEM,SAAS,eAAT,CAAyB,MAAzB,EAAiC,kBAAjC,EAAqD,YAArD,EAAmE;AACxE,MAAI,OAAO,MAAP,KAAkB,UAAtB,EAAkC;AAChC,WAAO,cAAc,CAAC,kBAAkB,CAAC,OAApB,EAA6B,YAA7B,CAArB;AACD,GAFD,MAEO;AACL,WAAO,cAAc,CAAC,kBAAkB,CAAC,UAApB,EAAgC,YAAhC,CAArB;AACD;AACF;;AAED,SAAS,cAAT,CAAwB,yBAAxB,EAAmD,YAAnD,EAAiE;AAC/D,MAAI,yBAAyB,CAAC,SAA1B,CAAoC,YAApC,MAAsD,SAA1D,EAAqE;AACnE,WAAO,yBAAyB,CAAC,SAA1B,CAAoC,YAApC,MAAsD,IAA7D;AACD;;AACD,MAAI,yBAAyB,CAAC,YAA1B,KAA2C,SAA/C,EAA0D;AACxD,WAAO,yBAAyB,CAAC,YAAjC;AACD;;AACD,EAAA,8BAA8B,CAAC,YAAD,CAA9B;AACA,SAAO,KAAP;AACD;;AAED,SAAS,8BAAT,CAAwC,YAAxC,EAAsD;AACpD,MAAI,gBAAgB,CAAC,YAAD,CAAhB,KAAmC,IAAvC,EAA6C;AAC3C,IAAA,gBAAgB,CAAC,YAAD,CAAhB,GAAiC,IAAjC;AACA,IAAA,MAAM,CAAC,GAAP,CACE,OADF,EAEE,iEAA+D,YAA/D,GAA2E,wDAA3E,GAA2E,sEAA3E,GACwE,iHAH1E;AAMD;AACF;;AAEM,SAAS,qBAAT,GAAiC;AACtC,EAAA,MAAM,CAAC,IAAP,CAAY,gBAAZ,EAA8B,OAA9B,CAAsC,UAAA,YAAA,EAAgB;AACpD,WAAO,gBAAgB,CAAC,YAAD,CAAvB;AACD,GAFD;AAGD","sourcesContent":["import { createNewLookupObject } from './create-new-lookup-object';\nimport * as logger from '../logger';\n\nconst loggedProperties = Object.create(null);\n\nexport function createProtoAccessControl(runtimeOptions) {\n  let defaultMethodWhiteList = Object.create(null);\n  defaultMethodWhiteList['constructor'] = false;\n  defaultMethodWhiteList['__defineGetter__'] = false;\n  defaultMethodWhiteList['__defineSetter__'] = false;\n  defaultMethodWhiteList['__lookupGetter__'] = false;\n\n  let defaultPropertyWhiteList = Object.create(null);\n  // eslint-disable-next-line no-proto\n  defaultPropertyWhiteList['__proto__'] = false;\n\n  return {\n    properties: {\n      whitelist: createNewLookupObject(\n        defaultPropertyWhiteList,\n        runtimeOptions.allowedProtoProperties\n      ),\n      defaultValue: runtimeOptions.allowProtoPropertiesByDefault\n    },\n    methods: {\n      whitelist: createNewLookupObject(\n        defaultMethodWhiteList,\n        runtimeOptions.allowedProtoMethods\n      ),\n      defaultValue: runtimeOptions.allowProtoMethodsByDefault\n    }\n  };\n}\n\nexport function resultIsAllowed(result, protoAccessControl, propertyName) {\n  if (typeof result === 'function') {\n    return checkWhiteList(protoAccessControl.methods, propertyName);\n  } else {\n    return checkWhiteList(protoAccessControl.properties, propertyName);\n  }\n}\n\nfunction checkWhiteList(protoAccessControlForType, propertyName) {\n  if (protoAccessControlForType.whitelist[propertyName] !== undefined) {\n    return protoAccessControlForType.whitelist[propertyName] === true;\n  }\n  if (protoAccessControlForType.defaultValue !== undefined) {\n    return protoAccessControlForType.defaultValue;\n  }\n  logUnexpecedPropertyAccessOnce(propertyName);\n  return false;\n}\n\nfunction logUnexpecedPropertyAccessOnce(propertyName) {\n  if (loggedProperties[propertyName] !== true) {\n    loggedProperties[propertyName] = true;\n    logger.log(\n      'error',\n      `Handlebars: Access has been denied to resolve the property \"${propertyName}\" because it is not an \"own property\" of its parent.\\n` +\n        `You can add a runtime option to disable the check or this warning:\\n` +\n        `See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details`\n    );\n  }\n}\n\nexport function resetLoggedProperties() {\n  Object.keys(loggedProperties).forEach(propertyName => {\n    delete loggedProperties[propertyName];\n  });\n}\n"]},"metadata":{},"sourceType":"script"}