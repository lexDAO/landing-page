{"ast":null,"code":"'use strict';\n\nexports.__esModule = true; // istanbul ignore next\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _utils = require('../utils');\n\nvar _exception = require('../exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nexports['default'] = function (instance) {\n  instance.registerHelper('if', function (conditional, options) {\n    if (arguments.length != 2) {\n      throw new _exception2['default']('#if requires exactly one argument');\n    }\n\n    if (_utils.isFunction(conditional)) {\n      conditional = conditional.call(this);\n    } // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n\n\n    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n  instance.registerHelper('unless', function (conditional, options) {\n    if (arguments.length != 2) {\n      throw new _exception2['default']('#unless requires exactly one argument');\n    }\n\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n};\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../../../lib/handlebars/helpers/if.js"],"names":[],"mappings":";;;;;;;;;;qBAAoC,U;;yBACd,c;;;;qBAEP,UAAS,QAAT,EAAmB;AAChC,EAAA,QAAQ,CAAC,cAAT,CAAwB,IAAxB,EAA8B,UAAS,WAAT,EAAsB,OAAtB,EAA+B;AAC3D,QAAI,SAAS,CAAC,MAAV,IAAoB,CAAxB,EAA2B;AACzB,YAAM,IAAA,WAAA,CAAA,SAAA,CAAA,CAAc,mCAAd,CAAN;AACD;;AACD,QAAI,MAAA,CAAA,UAAA,CAAW,WAAX,CAAJ,EAA6B;AAC3B,MAAA,WAAW,GAAG,WAAW,CAAC,IAAZ,CAAiB,IAAjB,CAAd;AACD,KAN0D,C;;;;;AAW3D,QAAK,CAAC,OAAO,CAAC,IAAR,CAAa,WAAd,IAA6B,CAAC,WAA9B,IAA8C,MAAA,CAAA,OAAA,CAAQ,WAAR,CAAnD,EAAyE;AACvE,aAAO,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,OAAO,CAAC,EAAR,CAAW,IAAX,CAAP;AACD;AACF,GAhBD;AAkBA,EAAA,QAAQ,CAAC,cAAT,CAAwB,QAAxB,EAAkC,UAAS,WAAT,EAAsB,OAAtB,EAA+B;AAC/D,QAAI,SAAS,CAAC,MAAV,IAAoB,CAAxB,EAA2B;AACzB,YAAM,IAAA,WAAA,CAAA,SAAA,CAAA,CAAc,uCAAd,CAAN;AACD;;AACD,WAAO,QAAQ,CAAC,OAAT,CAAiB,IAAjB,EAAuB,IAAvB,CAA4B,IAA5B,EAAkC,WAAlC,EAA+C;AACpD,MAAA,EAAE,EAAE,OAAO,CAAC,OADwC;AAEpD,MAAA,OAAO,EAAE,OAAO,CAAC,EAFmC;AAGpD,MAAA,IAAI,EAAE,OAAO,CAAC;AAHsC,KAA/C,CAAP;AAKD,GATD;AAUD,C","sourcesContent":["import { isEmpty, isFunction } from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('if', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#if requires exactly one argument');\n    }\n    if (isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if ((!options.hash.includeZero && !conditional) || isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#unless requires exactly one argument');\n    }\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"script"}