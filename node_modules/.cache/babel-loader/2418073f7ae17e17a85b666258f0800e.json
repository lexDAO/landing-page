{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nexports['default'] = function (instance) {\n  instance.registerHelper('blockHelperMissing', function (context, options) {\n    var inverse = options.inverse,\n        fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (_utils.isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        var data = _utils.createFrame(options.data);\n\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);\n        options = {\n          data: data\n        };\n      }\n\n      return fn(context, options);\n    }\n  });\n};\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../../../lib/handlebars/helpers/block-helper-missing.js"],"names":[],"mappings":";;;;qBAAwD,U;;qBAEzC,UAAS,QAAT,EAAmB;AAChC,EAAA,QAAQ,CAAC,cAAT,CAAwB,oBAAxB,EAA8C,UAAS,OAAT,EAAkB,OAAlB,EAA2B;AACvE,QAAI,OAAO,GAAG,OAAO,CAAC,OAAtB;AAAA,QACE,EAAE,GAAG,OAAO,CAAC,EADf;;AAGA,QAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,aAAO,EAAE,CAAC,IAAD,CAAT;AACD,KAFD,MAEO,IAAI,OAAO,KAAK,KAAZ,IAAqB,OAAO,IAAI,IAApC,EAA0C;AAC/C,aAAO,OAAO,CAAC,IAAD,CAAd;AACD,KAFM,MAEA,IAAI,MAAA,CAAA,OAAA,CAAQ,OAAR,CAAJ,EAAsB;AAC3B,UAAI,OAAO,CAAC,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAI,OAAO,CAAC,GAAZ,EAAiB;AACf,UAAA,OAAO,CAAC,GAAR,GAAc,CAAC,OAAO,CAAC,IAAT,CAAd;AACD;;AAED,eAAO,QAAQ,CAAC,OAAT,CAAiB,IAAjB,CAAsB,OAAtB,EAA+B,OAA/B,CAAP;AACD,OAND,MAMO;AACL,eAAO,OAAO,CAAC,IAAD,CAAd;AACD;AACF,KAVM,MAUA;AACL,UAAI,OAAO,CAAC,IAAR,IAAgB,OAAO,CAAC,GAA5B,EAAiC;AAC/B,YAAI,IAAI,GAAG,MAAA,CAAA,WAAA,CAAY,OAAO,CAAC,IAApB,CAAX;;AACA,QAAA,IAAI,CAAC,WAAL,GAAmB,MAAA,CAAA,iBAAA,CACjB,OAAO,CAAC,IAAR,CAAa,WADI,EAEjB,OAAO,CAAC,IAFS,CAAnB;AAIA,QAAA,OAAO,GAAG;AAAE,UAAA,IAAI,EAAE;AAAR,SAAV;AACD;;AAED,aAAO,EAAE,CAAC,OAAD,EAAU,OAAV,CAAT;AACD;AACF,GA9BD;AA+BD,C","sourcesContent":["import { appendContextPath, createFrame, isArray } from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('blockHelperMissing', function(context, options) {\n    let inverse = options.inverse,\n      fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        let data = createFrame(options.data);\n        data.contextPath = appendContextPath(\n          options.data.contextPath,\n          options.name\n        );\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}