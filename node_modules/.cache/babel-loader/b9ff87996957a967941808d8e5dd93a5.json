{"ast":null,"code":"var urilib = require('url');\n\nvar helpers = require('./helpers');\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\n\nfunction SchemaScanResult(found, ref) {\n  this.id = found;\n  this.ref = ref;\n}\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\n\n\nmodule.exports.scan = function scan(base, schema) {\n  function scanSchema(baseuri, schema) {\n    if (!schema || typeof schema != 'object') return; // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n\n    if (schema.$ref) {\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri] + 1 : 0;\n      return;\n    }\n\n    var ourBase = schema.id ? urilib.resolve(baseuri, schema.id) : baseuri;\n\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if (ourBase.indexOf('#') < 0) ourBase += '#';\n\n      if (found[ourBase]) {\n        if (!helpers.deepCompareStrict(found[ourBase], schema)) {\n          throw new Error('Schema <' + schema + '> already exists with different definition');\n        }\n\n        return found[ourBase];\n      }\n\n      found[ourBase] = schema; // strip trailing fragment\n\n      if (ourBase[ourBase.length - 1] == '#') {\n        found[ourBase.substring(0, ourBase.length - 1)] = schema;\n      }\n    }\n\n    scanArray(ourBase + '/items', Array.isArray(schema.items) ? schema.items : [schema.items]);\n    scanArray(ourBase + '/extends', Array.isArray(schema.extends) ? schema.extends : [schema.extends]);\n    scanSchema(ourBase + '/additionalItems', schema.additionalItems);\n    scanObject(ourBase + '/properties', schema.properties);\n    scanSchema(ourBase + '/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase + '/definitions', schema.definitions);\n    scanObject(ourBase + '/patternProperties', schema.patternProperties);\n    scanObject(ourBase + '/dependencies', schema.dependencies);\n    scanArray(ourBase + '/disallow', schema.disallow);\n    scanArray(ourBase + '/allOf', schema.allOf);\n    scanArray(ourBase + '/anyOf', schema.anyOf);\n    scanArray(ourBase + '/oneOf', schema.oneOf);\n    scanSchema(ourBase + '/not', schema.not);\n  }\n\n  function scanArray(baseuri, schemas) {\n    if (!Array.isArray(schemas)) return;\n\n    for (var i = 0; i < schemas.length; i++) {\n      scanSchema(baseuri + '/' + i, schemas[i]);\n    }\n  }\n\n  function scanObject(baseuri, schemas) {\n    if (!schemas || typeof schemas != 'object') return;\n\n    for (var p in schemas) {\n      scanSchema(baseuri + '/' + p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  var schemaUri = base;\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n};","map":{"version":3,"sources":["/Users/kerp/Documents/GitHub/landing-page/node_modules/jsonschema/lib/scan.js"],"names":["urilib","require","helpers","module","exports","SchemaScanResult","found","ref","id","scan","base","schema","scanSchema","baseuri","$ref","resolvedUri","resolve","ourBase","indexOf","deepCompareStrict","Error","length","substring","scanArray","Array","isArray","items","extends","additionalItems","scanObject","properties","additionalProperties","definitions","patternProperties","dependencies","disallow","allOf","anyOf","oneOf","not","schemas","i","p","schemaUri"],"mappings":"AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAArB;;AAEAE,MAAM,CAACC,OAAP,CAAeC,gBAAf,GAAkCA,gBAAlC;;AACA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,GAAjC,EAAqC;AACnC,OAAKC,EAAL,GAAUF,KAAV;AACA,OAAKC,GAAL,GAAWA,GAAX;AACD;AAED;;;;;;;;AAMAJ,MAAM,CAACC,OAAP,CAAeK,IAAf,GAAsB,SAASA,IAAT,CAAcC,IAAd,EAAoBC,MAApB,EAA2B;AAC/C,WAASC,UAAT,CAAoBC,OAApB,EAA6BF,MAA7B,EAAoC;AAClC,QAAG,CAACA,MAAD,IAAW,OAAOA,MAAP,IAAe,QAA7B,EAAuC,OADL,CAElC;;AACA,QAAGA,MAAM,CAACG,IAAV,EAAe;AACb,UAAIC,WAAW,GAAGf,MAAM,CAACgB,OAAP,CAAeH,OAAf,EAAwBF,MAAM,CAACG,IAA/B,CAAlB;AACAP,MAAAA,GAAG,CAACQ,WAAD,CAAH,GAAmBR,GAAG,CAACQ,WAAD,CAAH,GAAmBR,GAAG,CAACQ,WAAD,CAAH,GAAiB,CAApC,GAAwC,CAA3D;AACA;AACD;;AACD,QAAIE,OAAO,GAAGN,MAAM,CAACH,EAAP,GAAYR,MAAM,CAACgB,OAAP,CAAeH,OAAf,EAAwBF,MAAM,CAACH,EAA/B,CAAZ,GAAiDK,OAA/D;;AACA,QAAII,OAAJ,EAAa;AACX;AACA,UAAGA,OAAO,CAACC,OAAR,CAAgB,GAAhB,IAAqB,CAAxB,EAA2BD,OAAO,IAAI,GAAX;;AAC3B,UAAGX,KAAK,CAACW,OAAD,CAAR,EAAkB;AAChB,YAAG,CAACf,OAAO,CAACiB,iBAAR,CAA0Bb,KAAK,CAACW,OAAD,CAA/B,EAA0CN,MAA1C,CAAJ,EAAsD;AACpD,gBAAM,IAAIS,KAAJ,CAAU,aAAWT,MAAX,GAAkB,4CAA5B,CAAN;AACD;;AACD,eAAOL,KAAK,CAACW,OAAD,CAAZ;AACD;;AACDX,MAAAA,KAAK,CAACW,OAAD,CAAL,GAAiBN,MAAjB,CATW,CAUX;;AACA,UAAGM,OAAO,CAACA,OAAO,CAACI,MAAR,GAAe,CAAhB,CAAP,IAA2B,GAA9B,EAAkC;AAChCf,QAAAA,KAAK,CAACW,OAAO,CAACK,SAAR,CAAkB,CAAlB,EAAqBL,OAAO,CAACI,MAAR,GAAe,CAApC,CAAD,CAAL,GAAgDV,MAAhD;AACD;AACF;;AACDY,IAAAA,SAAS,CAACN,OAAO,GAAC,QAAT,EAAoBO,KAAK,CAACC,OAAN,CAAcd,MAAM,CAACe,KAArB,IAA4Bf,MAAM,CAACe,KAAnC,GAAyC,CAACf,MAAM,CAACe,KAAR,CAA7D,CAAT;AACAH,IAAAA,SAAS,CAACN,OAAO,GAAC,UAAT,EAAsBO,KAAK,CAACC,OAAN,CAAcd,MAAM,CAACgB,OAArB,IAA8BhB,MAAM,CAACgB,OAArC,GAA6C,CAAChB,MAAM,CAACgB,OAAR,CAAnE,CAAT;AACAf,IAAAA,UAAU,CAACK,OAAO,GAAC,kBAAT,EAA6BN,MAAM,CAACiB,eAApC,CAAV;AACAC,IAAAA,UAAU,CAACZ,OAAO,GAAC,aAAT,EAAwBN,MAAM,CAACmB,UAA/B,CAAV;AACAlB,IAAAA,UAAU,CAACK,OAAO,GAAC,uBAAT,EAAkCN,MAAM,CAACoB,oBAAzC,CAAV;AACAF,IAAAA,UAAU,CAACZ,OAAO,GAAC,cAAT,EAAyBN,MAAM,CAACqB,WAAhC,CAAV;AACAH,IAAAA,UAAU,CAACZ,OAAO,GAAC,oBAAT,EAA+BN,MAAM,CAACsB,iBAAtC,CAAV;AACAJ,IAAAA,UAAU,CAACZ,OAAO,GAAC,eAAT,EAA0BN,MAAM,CAACuB,YAAjC,CAAV;AACAX,IAAAA,SAAS,CAACN,OAAO,GAAC,WAAT,EAAsBN,MAAM,CAACwB,QAA7B,CAAT;AACAZ,IAAAA,SAAS,CAACN,OAAO,GAAC,QAAT,EAAmBN,MAAM,CAACyB,KAA1B,CAAT;AACAb,IAAAA,SAAS,CAACN,OAAO,GAAC,QAAT,EAAmBN,MAAM,CAAC0B,KAA1B,CAAT;AACAd,IAAAA,SAAS,CAACN,OAAO,GAAC,QAAT,EAAmBN,MAAM,CAAC2B,KAA1B,CAAT;AACA1B,IAAAA,UAAU,CAACK,OAAO,GAAC,MAAT,EAAiBN,MAAM,CAAC4B,GAAxB,CAAV;AACD;;AACD,WAAShB,SAAT,CAAmBV,OAAnB,EAA4B2B,OAA5B,EAAoC;AAClC,QAAG,CAAChB,KAAK,CAACC,OAAN,CAAce,OAAd,CAAJ,EAA4B;;AAC5B,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,OAAO,CAACnB,MAAvB,EAA+BoB,CAAC,EAAhC,EAAmC;AACjC7B,MAAAA,UAAU,CAACC,OAAO,GAAC,GAAR,GAAY4B,CAAb,EAAgBD,OAAO,CAACC,CAAD,CAAvB,CAAV;AACD;AACF;;AACD,WAASZ,UAAT,CAAoBhB,OAApB,EAA6B2B,OAA7B,EAAqC;AACnC,QAAG,CAACA,OAAD,IAAY,OAAOA,OAAP,IAAgB,QAA/B,EAAyC;;AACzC,SAAI,IAAIE,CAAR,IAAaF,OAAb,EAAqB;AACnB5B,MAAAA,UAAU,CAACC,OAAO,GAAC,GAAR,GAAY6B,CAAb,EAAgBF,OAAO,CAACE,CAAD,CAAvB,CAAV;AACD;AACF;;AAED,MAAIpC,KAAK,GAAG,EAAZ;AACA,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIoC,SAAS,GAAGjC,IAAhB;AACAE,EAAAA,UAAU,CAACF,IAAD,EAAOC,MAAP,CAAV;AACA,SAAO,IAAIN,gBAAJ,CAAqBC,KAArB,EAA4BC,GAA5B,CAAP;AACD,CAzDD","sourcesContent":["\nvar urilib = require('url');\nvar helpers = require('./helpers');\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref){\n  this.id = found;\n  this.ref = ref;\n}\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\nmodule.exports.scan = function scan(base, schema){\n  function scanSchema(baseuri, schema){\n    if(!schema || typeof schema!='object') return;\n    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n    if(schema.$ref){\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri]+1 : 0;\n      return;\n    }\n    var ourBase = schema.id ? urilib.resolve(baseuri, schema.id) : baseuri;\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if(ourBase.indexOf('#')<0) ourBase += '#';\n      if(found[ourBase]){\n        if(!helpers.deepCompareStrict(found[ourBase], schema)){\n          throw new Error('Schema <'+schema+'> already exists with different definition');\n        }\n        return found[ourBase];\n      }\n      found[ourBase] = schema;\n      // strip trailing fragment\n      if(ourBase[ourBase.length-1]=='#'){\n        found[ourBase.substring(0, ourBase.length-1)] = schema;\n      }\n    }\n    scanArray(ourBase+'/items', (Array.isArray(schema.items)?schema.items:[schema.items]));\n    scanArray(ourBase+'/extends', (Array.isArray(schema.extends)?schema.extends:[schema.extends]));\n    scanSchema(ourBase+'/additionalItems', schema.additionalItems);\n    scanObject(ourBase+'/properties', schema.properties);\n    scanSchema(ourBase+'/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase+'/definitions', schema.definitions);\n    scanObject(ourBase+'/patternProperties', schema.patternProperties);\n    scanObject(ourBase+'/dependencies', schema.dependencies);\n    scanArray(ourBase+'/disallow', schema.disallow);\n    scanArray(ourBase+'/allOf', schema.allOf);\n    scanArray(ourBase+'/anyOf', schema.anyOf);\n    scanArray(ourBase+'/oneOf', schema.oneOf);\n    scanSchema(ourBase+'/not', schema.not);\n  }\n  function scanArray(baseuri, schemas){\n    if(!Array.isArray(schemas)) return;\n    for(var i=0; i<schemas.length; i++){\n      scanSchema(baseuri+'/'+i, schemas[i]);\n    }\n  }\n  function scanObject(baseuri, schemas){\n    if(!schemas || typeof schemas!='object') return;\n    for(var p in schemas){\n      scanSchema(baseuri+'/'+p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  var schemaUri = base;\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n}\n"]},"metadata":{},"sourceType":"script"}